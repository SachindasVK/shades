
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SHADES - Admin Order management</title>
    <script defer src="/admin.js"></script>
    <link rel="icon" href="favicon/favicon.ico" type="ico">
</head>
<body>
    <%- include('../../views/partials/admin/header') %>
     <!-- Orders Page Content -->
    <div class="p-4 sm:p-6">
        <!-- Search, Sort, and Filter Controls -->
        <div class="bg-white rounded-lg shadow-sm p-4 sm:p-6 mb-6">
            <p class="text-sm font-medium text-gray-700 mb-2">Search Orders</p>
            <form method="GET" action="/admin/orders" class="flex flex-col space-y-4 sm:flex-row sm:space-y-0 sm:space-x-4 sm:items-center">
                <!-- Search -->
                <div class="relative w-full sm:w-auto">
                    <input type="text" name="search" value="<%= search %>" placeholder="Search by Order ID"
                        class="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                </div>
                <!-- Sort -->
                <select name="sort"
                    class="w-full sm:w-auto px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    onchange="this.form.submit()">
                    <option value="date-desc" <%= sort === 'date-desc' ? 'selected' : '' %>>Date: Newest First</option>
                    <option value="date-asc" <%= sort === 'date-asc' ? 'selected' : '' %>>Date: Oldest First</option>
                    <option value="total-desc" <%= sort === 'total-desc' ? 'selected' : '' %>>Total: High to Low</option>
                    <option value="total-asc" <%= sort === 'total-asc' ? 'selected' : '' %>>Total: Low to High</option>
                </select>
                <!-- Filter -->
                <select name="status"
                    class="w-full sm:w-auto px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    onchange="this.form.submit()">
                    <option value="all" <%= status === 'all' ? 'selected' : '' %>>All Statuses</option>
                    <option value="pending" <%= status === 'pending' ? 'selected' : '' %>>Pending</option>
                    <option value="confirmed" <%= status === 'confirmed' ? 'selected' : '' %>>Confirmed</option>
                    <option value="shipped" <%= status === 'shipped' ? 'selected' : '' %>>Shipped</option>
                    <option value="delivered" <%= status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                    <option value="return_requested" <%= status === 'return_requested' ? 'selected' : '' %>>Return Request</option>
                    <option value="returned" <%= status === 'returned' ? 'selected' : '' %>>Returned</option>
                    <option value="cancelled" <%= status === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
                </select>
                <!-- Search Button -->
                <button type="submit" class="w-full sm:w-auto px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Search</button>
                <!-- Clear Search -->
                <a href="/admin/orders" class="w-full sm:w-auto px-6 py-2 bg-gray-200 rounded-lg hover:bg-gray-300 text-center text-decoration-none">Clear</a>
            </form>
        </div>

        <!-- Orders Table -->
        <div class="bg-white rounded-lg shadow-sm overflow-hidden mb-6">
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200 hidden sm:table" id="ordersTable">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order ID</th>
                            <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
                            <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                            <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                            <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th scope="col" class="px-4 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order Details</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200" id="ordersBody">
                        <% orders.forEach(order => { %>
                            <tr data-order-id="<%= order.orderId %>">
                                <td class="px-4 sm:px-6 py-4 whitespace-nowrap text-left">
                                    <div class="text-sm font-medium text-gray-900">#<%= order.orderId %></div>
                                </td>
                                <td class="px-4 sm:px-6 py-4 whitespace-nowrap text-left">
                                    <div class="flex items-center">
                                        <div class="h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center">
                                            <span class="text-xs font-medium">
                                                <%= order.userId?.name?.split(' ').map(n => n[0]).join('').toUpperCase() %>
                                            </span>
                                        </div>
                                        <div class="ml-3">
                                            <div class="text-sm font-medium text-gray-900"><%= order.userId?.name || 'Unknown' %></div>
                                            <div class="text-xs text-gray-500"><%= order.userId?.email || 'N/A' %></div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-4 sm:px-6 py-4 whitespace-nowrap text-left">
                                    <div class="text-sm text-gray-900"><%= new Date(order.createdAt).toLocaleDateString('en-GB') %></div>
                                </td>
                                <td class="px-4 sm:px-6 py-4 whitespace-nowrap text-left">
                                    <div class="text-sm font-medium text-gray-900">â‚¹<%= order.finalAmount %></div>
                                </td>
                                <td class="px-4 sm:px-6 py-4 whitespace-nowrap text-left">
                                    <select class="status-select px-2 py-1 text-xs font-semibold rounded-full w-full"
                                        data-order-id="<%= order.orderId %>">
                                        <% ['pending', 'confirmed', 'shipped', 'delivered', 'cancelled', 'return_requested', 'returned'].forEach((status, index) => { %>
                                            <option 
                                                value="<%= status %>" 
                                                <%= order.status === status ? 'selected' : '' %>
                                                <%= order.status === 'cancelled' ? 'disabled' : '' %>
                                                <%= order.status === 'pending' ? 'disabled' : '' %>
                                                <%= index < ['pending', 'confirmed', 'shipped', 'delivered', 'cancelled', 'return_requested', 'returned'].indexOf(order.status) ? 'disabled' : '' %>
                                            >
                                                <%= status.replace('_', ' ').replace(/\b\w/g, c => c.toUpperCase()) %>
                                            </option>
                                        <% }) %>
                                    </select>
                                </td>
                                <td class="px-4 sm:px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                                    <a href="/admin/order/<%= order.orderId %>">
                                        <button class="view-order text-black hover:underline">View</button>
                                    </a>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
                <!-- Mobile Card Layout -->
                <div class="sm:hidden space-y-4 p-4">
                    <% orders.forEach(order => { %>
                        <div class="bg-white border rounded-lg p-4 shadow-sm" data-order-id="<%= order.orderId %>">
                            <div class="flex justify-between items-center">
                                <div class="text-sm font-medium text-gray-900">#<%= order.orderId %></div>
                                <a href="/admin/order/<%= order.orderId %>" class="text-blue-600 hover:underline text-sm">View</a>
                            </div>
                            <div class="mt-2">
                                <div class="flex items-center">
                                    <div class="h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center">
                                        <span class="text-xs font-medium">
                                            <%= order.userId?.name?.split(' ').map(n => n[0]).join('').toUpperCase() %>
                                        </span>
                                    </div>
                                    <div class="ml-3">
                                        <div class="text-sm font-medium text-gray-900"><%= order.userId?.name || 'Unknown' %></div>
                                        <div class="text-xs text-gray-500"><%= order.userId?.email || 'N/A' %></div>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-2 text-sm text-gray-900">
                                <span class="font-medium">Date:</span> <%= new Date(order.createdAt).toLocaleDateString('en-GB') %>
                            </div>
                            <div class="mt-2 text-sm font-medium text-gray-900">
                                <span class="font-medium">Total:</span> â‚¹<%= order.finalAmount %>
                            </div>
                            <div class="mt-2">
                                <select class="status-select px-2 py-1 text-xs font-semibold rounded-full w-full"
                                    data-order-id="<%= order.orderId %>">
                                    <% ['pending', 'confirmed', 'shipped', 'delivered', 'cancelled', 'return_requested', 'returned'].forEach((status, index) => { %>
                                        <option 
                                            value="<%= status %>" 
                                            <%= order.status === status ? 'selected' : '' %>
                                            <%= order.status === 'cancelled' ? 'disabled' : '' %>
                                            <%= order.status === 'pending' ? 'disabled' : '' %>
                                            <%= index < ['pending', 'confirmed', 'shipped', 'delivered', 'cancelled', 'return_requested', 'returned'].indexOf(order.status) ? 'disabled' : '' %>
                                        >
                                            <%= status.replace('_', ' ').replace(/\b\w/g, c => c.toUpperCase()) %>
                                        </option>
                                    <% }) %>
                                </select>
                            </div>
                        </div>
                    <% }) %>
                </div>
            </div>
        </div>

        <!-- Pagination -->
        <% if (totalPages > 1) { %>
            <div class="px-4 sm:px-6 py-4 border-t border-gray-200">
                <div class="flex flex-col sm:flex-row justify-between items-center space-y-4 sm:space-y-0">
                    <div class="text-sm text-gray-500">
                        Showing
                        <span class="font-medium"><%= ((currentPage - 1) * limit) + 1 %></span>
                        to
                        <span class="font-medium"><%= Math.min(currentPage * limit, totalOrders) %></span>
                        of
                        <span class="font-medium"><%= totalOrders %></span> orders
                    </div>
                    <nav class="flex space-x-1">
                        <!-- Previous -->
                        <% if (currentPage > 1) { 
                            const prevParams = new URLSearchParams({
                                page: (currentPage - 1).toString(),
                                limit: limit.toString(),
                                search: search || '',
                                sort: sort || '',
                                status: status || ''
                            });
                        %>
                            <a href="?<%= prevParams.toString() %>" class="px-3 py-1 rounded-md text-sm font-medium bg-gray-200 text-gray-700 hover:bg-gray-300">Previous</a>
                        <% } else { %>
                            <span class="px-3 py-1 rounded-md text-sm font-medium bg-gray-100 text-gray-400 cursor-not-allowed">Previous</span>
                        <% } %>

                        <!-- Dynamic Page Numbers: Max 3 -->
                        <% 
                            let start = Math.max(1, currentPage - 1);
                            let end = Math.min(totalPages, start + 2);
                            if (end - start < 2) {
                                start = Math.max(1, end - 2);
                            }
                            for (let i = start; i <= end; i++) {
                                const pageParams = new URLSearchParams({
                                    page: i.toString(),
                                    limit: limit.toString(),
                                    search: search || '',
                                    sort: sort || '',
                                    status: status || ''
                                });
                        %>
                            <% if (i === currentPage) { %>
                                <span class="px-3 py-1 rounded-md text-sm font-medium bg-blue-600 text-white"><%= i %></span>
                            <% } else { %>
                                <a href="?<%= pageParams.toString() %>" class="px-3 py-1 rounded-md text-sm font-medium bg-gray-200 text-gray-700 hover:bg-gray-300"><%= i %></a>
                            <% } %>
                        <% } %>

                        <!-- Next -->
                        <% if (currentPage < totalPages) { 
                            const nextParams = new URLSearchParams({
                                page: (currentPage + 1).toString(),
                                limit: limit.toString(),
                                search: search || '',
                                sort: sort || '',
                                status: status || ''
                            });
                        %>
                            <a href="?<%= nextParams.toString() %>" class="px-3 py-1 rounded-md text-sm font-medium bg-gray-200 text-gray-700 hover:bg-gray-300">Next</a>
                        <% } else { %>
                            <span class="px-3 py-1 rounded-md text-sm font-medium bg-gray-100 text-gray-400 cursor-not-allowed">Next</span>
                        <% } %>
                    </nav>
                </div>
            </div>
        <% } %>

        <!-- Toast Notification -->
        <div id="toast" class="fixed bottom-4 right-4 z-50 hidden">
            <div class="bg-white rounded-lg shadow-lg border-l-4 border-green-500 px-4 py-3 w-11/12 sm:max-w-sm">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-check-circle text-green-500"></i>
                    </div>
                    <div class="ml-3">
                        <p id="toastMessage" class="text-sm font-medium text-gray-900"></p>
                    </div>
                    <div class="ml-auto pl-3">
                        <button id="closeToast" class="text-gray-400 hover:text-gray-500">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Cancel Modal -->
        <div id="cancelOrderModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden z-50">
            <div class="bg-white rounded-lg p-6 w-11/12 sm:max-w-md mx-4 shadow-xl">
                <div class="flex items-center mb-4">
                    <i class="fas fa-exclamation-triangle text-red-500 mr-3"></i>
                    <h2 class="text-lg font-semibold">Cancel Order</h2>
                </div>
                <p class="text-sm text-gray-700 mb-4">Are you sure you want to cancel this entire order? This action cannot be undone.</p>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Reason for cancellation *</label>
                    <select id="cancelReason" class="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500">
                        <option value="">Select a reason</option>
                        <option value="Out of stock">Out of stock</option>
                        <option value="Invalid order">Invalid order</option>
                        <option value="Payment not verified">Payment not verified</option>
                        <option value="Customer asked to cancel">Customer asked to cancel</option>
                        <option value="Fraud suspected">Fraud suspected</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div id="otherReasonDiv" class="mb-4 hidden">
                    <textarea id="otherReason" class="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500" rows="3" placeholder="Please specify your reason"></textarea>
                </div>
                <div class="flex justify-end space-x-3">
                    <button id="closeModalBtn" class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 transition-colors">Cancel</button>
                    <button id="confirmCancelBtn" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors" data-order-id="<%= orders._id %>">
                        <i class="fas fa-times mr-2"></i>Confirm Cancellation
                    </button>
                </div>
            </div>
        </div>
<%- include('../../views/partials/admin/footer') %>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                // Close toast functionality
                const closeToast = document.getElementById('closeToast');
                if (closeToast) {
                    closeToast.addEventListener('click', function () {
                        document.getElementById('toast').classList.add('hidden');
                    });
                }

                // Cancel order modal functionality
                document.getElementById('confirmCancelBtn').addEventListener('click', async function () {
                    const orderId = this.getAttribute('data-order-id');
                    const reason = document.getElementById('cancelReason').value;
                    const otherReason = document.getElementById('otherReason').value;

                    if (!reason) {
                        showToast('Please select a reason for cancellation', 'error');
                        return;
                    }

                    const finalReason = reason === 'Other' ? otherReason : reason;

                    if (reason === 'Other' && !otherReason.trim()) {
                        showToast('Please specify your reason', 'error');
                        return;
                    }

                    try {
                        const response = await fetch(`/admin/orders/${orderId}/cancel`, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                status: 'cancelled',
                                reason: finalReason
                            }),
                        });

                        const data = await response.json();

                        if (response.ok && data.success) {
                            showToast('Order cancelled successfully');
                            document.getElementById('cancelOrderModal').classList.add('hidden');
                            setTimeout(() => window.location.reload(), 1000);
                        } else {
                            showToast(data.message || 'Failed to cancel order', 'error');
                        }
                    } catch (error) {
                        console.error(error);
                        showToast('Something went wrong', 'error');
                    }
                });

                document.getElementById('cancelReason').addEventListener('change', function () {
                    const otherDiv = document.getElementById('otherReasonDiv');
                    if (this.value === 'Other') {
                        otherDiv.classList.remove('hidden');
                    } else {
                        otherDiv.classList.add('hidden');
                    }
                });

                document.getElementById('closeModalBtn').addEventListener('click', function () {
                    document.getElementById('cancelOrderModal').classList.add('hidden');
                });

                // Status change functionality
                document.querySelectorAll('.status-select').forEach(select => {
                    const currentStatus = select.value;
                    select.setAttribute('data-original-status', currentStatus);
                    updateStatusStyling(select, currentStatus);

                    select.addEventListener('change', async (e) => {
                        const orderId = e.target.dataset.orderId;
                        const newStatus = e.target.value;
                        const originalStatus = e.target.getAttribute('data-original-status');

                        if (newStatus === 'cancelled') {
                            document.getElementById('cancelOrderModal').classList.remove('hidden');
                            document.getElementById('confirmCancelBtn').setAttribute('data-order-id', orderId);
                            e.target.value = originalStatus;
                            return;
                        }

                        // Rollback Prevention
                        const statusOrder = ['pending', 'confirmed', 'shipped', 'delivered', 'cancelled', 'return_requested', 'returned'];
                        const oldIndex = statusOrder.indexOf(originalStatus);
                        const newIndex = statusOrder.indexOf(newStatus);

                        if (originalStatus === 'cancelled') {
                            showToast('Order is cancelled', 'error');
                            e.target.value = originalStatus;
                            return;
                        }

                        if (newIndex < oldIndex) {
                            showToast('Cannot rollback to a previous status', 'error');
                            e.target.value = originalStatus;
                            return;
                        }

                        try {
                            e.target.disabled = true;
                            e.target.style.opacity = '0.6';

                            const response = await fetch(`/admin/orders/${orderId}/status`, {
                                method: 'PATCH',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ status: newStatus }),
                            });

                            const data = await response.json();

                            if (response.ok && data.success) {
                                showToast('Order status updated successfully');
                                e.target.setAttribute('data-original-status', newStatus);
                                updateStatusStyling(e.target, newStatus);
                                handleStatusSpecificActions(orderId, newStatus);
                            } else {
                                showToast(data.message || 'Failed to update order status', 'error');
                                e.target.value = originalStatus;
                            }
                        } catch (error) {
                            console.error('Error updating status:', error);
                            showToast('An error occurred. Please try again.', 'error');
                            e.target.value = originalStatus;
                        } finally {
                            e.target.disabled = false;
                            e.target.style.opacity = '1';
                        }
                    });
                });

                function updateStatusStyling(selectElement, status) {
                    selectElement.className = selectElement.className.replace(/bg-\w+-\d+/g, '').replace(/text-\w+-\d+/g, '');
                    const statusStyles = {
                        'pending': 'bg-yellow-100 text-yellow-800',
                        'confirmed': 'bg-blue-100 text-blue-800',
                        'shipped': 'bg-purple-100 text-purple-800',
                        'delivered': 'bg-green-100 text-green-800',
                        'cancelled': 'bg-red-100 text-red-800',
                        'return_requested': 'bg-orange-100 text-orange-800',
                        'returned': 'bg-gray-100 text-gray-800'
                    };
                    if (statusStyles[status]) {
                        selectElement.className += ` ${statusStyles[status]}`;
                    }
                }

                function handleStatusSpecificActions(orderId, status) {
                    const verifyReturnButton = document.querySelector(`.verify-return[data-order-id="${orderId}"]`);
                    if (verifyReturnButton) {
                        if (status === 'return_requested') {
                            verifyReturnButton.disabled = false;
                            verifyReturnButton.classList.remove('opacity-50', 'cursor-not-allowed');
                        } else {
                            verifyReturnButton.disabled = true;
                            verifyReturnButton.classList.add('opacity-50', 'cursor-not-allowed');
                        }
                    }
                }
            });
        </script>
    </div>
</body>
</html>
   