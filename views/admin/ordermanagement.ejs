<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SHADES - Admin Orders management</title>
    <link rel="icon" href="/favicon-16x16.png" type="image/png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <script defer src="/script/admin.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            'shades-black': '#111111',
            'shades-gray': '#F5F5F7',
          },
        },
      },
    };
  </script>
</head>
<body class="bg-shades-black">
    <%- include('../../views/partials/admin/header') %>
    <!-- Main Content -->
    <main class="flex-1 md:ml-64 transition-all duration-300">
      <!-- Top Header -->
      <header class="sticky top-0 z-40 bg-shades-black shadow-sm">
        <div class="flex justify-between items-center px-4 sm:px-6 py-4">
          <button id="mobile-menu-toggle" class="md:hidden text-gray-800 focus:outline-none">
            <i class="fas fa-bars text-xl"></i>
          </button>
          <h1 class="text-white font-medium">Admin Dashboard</h1>
        </div>
      </header>
     <!-- Orders Page Content -->
    <div class="p-6">
      
        <!-- Search, Sort, and Filter Controls -->
        <div class="bg-black rounded-lg shadow-sm p-6">
            <p class="text-sm font-medium text-white mb-1">Search Orders</p>
            <div class="flex flex-col md:flex-row justify-between items-center">
               
                <form method="GET" action="/admin/orders" class="flex space-x-4 mt-4 md:mt-0">
                    <!-- Search -->
                    <div class="relative">
                        <input type="text" name="search" value="<%= search %>" placeholder="Search by Order ID"
    class="w-96 pl-10 pr-4 py-2 rounded-lg border bg-black text-white border-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500">

                        <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                    </div>
                    <!-- Sort -->
                    <select name="sort"
                        class="px-4 py-2 bg-black text-white rounded-lg border border-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        onchange="this.form.submit()">
                       <option value="date-desc" <%= sort === 'date-desc' ? "selected='selected'" : '' %> >Date: Newest First</option>
<option value="date-asc" <%= sort === 'date-asc' ? "selected='selected'" : '' %> >Date: Oldest First</option>
<option value="total-desc" <%= sort === 'total-desc' ? "selected='selected'" : '' %> >Total: High to Low</option>
<option value="total-asc" <%= sort === 'total-asc' ? "selected='selected'" : '' %> >Total: Low to High</option>

                    </select>
                    <!-- Filter -->
                    <select name="status"
                        class="px-4 py-2 bg-black text-white rounded-lg border border-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        onchange="this.form.submit()">
                        
                        <option value="all" <%= status === 'all' ? 'selected' : '' %>>All Statuses</option>
                        <option value="pending" <%= status === 'pending' ? 'selected' : '' %>>Pending</option>
                       <option value="confirmed" <%= status === 'confirmed' ? 'selected' : '' %>>Confirmed</option>
                        <option value="shipped" <%= status === 'shipped' ? 'selected' : '' %>>Shipped</option>
                        <option value="delivered" <%= status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                        <option value="return_requested" <%= status === 'return_requested' ? 'selected' : '' %>>Return request</option>
                        <option value="returned" <%= status === 'returned' ? 'selected' : '' %>>Returned</option>
                        <option value="cancelled" <%= status === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
                        
                    </select>
                    <!-- Search Button -->
                    <button type="submit" class="px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800 transition ease-in focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 w-full sm:w-auto">Search</button>
                    <!-- Clear Search -->
                    <a href="/admin/orders" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 inline-flex items-center justify-center w-full sm:w-auto">Clear</a>
                </form>
            </div>
        </div>


        

        <!-- Orders Table -->
        <div class="bg-black rounded-lg shadow-sm overflow-hidden">
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200" id="ordersTable">
                    <thead class="bg-gray-950">
                        <tr>
                            <th scope="col"
                                class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">
                                Order ID</th>
                            <th scope="col"
                                class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">
                                Customer</th>
                            <th scope="col"
                                class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">
                                Date</th>
                            <th scope="col"
                                class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">
                                Total</th>
                            <th scope="col"
                                class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">
                                Status</th>
                                 <th scope="col"
                                class="px-6 py-3 text-left text-xs font-medium text-gray-200 uppercase tracking-wider">
                               order Details</th>
                        </tr>
                    </thead>
                    <tbody class="bg-black divide-y divide-gray-200" id="ordersBody">
                        <% orders.forEach(order=> { %>
                            <tr data-order-id="<%= order.orderId %>" class="hover:bg-gray-950">
                                <td class="px-6 py-4 whitespace-nowrap text-left">
                                    <div class="text-sm font-medium text-gray-200">#<%= order.orderId %>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-left">
                                    <div class="flex items-center">
                                        <div class="h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center">
                                            <span class="text-xs font-medium">
                                                <%= order.userId?.name ? order.userId.name.split(' ').map(n => n[0]).join('').toUpperCase() : '' %>
                                            </span>
                                        </div>
                                        <div class="ml-3">
                                            <div class="text-sm font-medium text-gray-200"><%= order.userId?.name || 'Unknown' %>
                                            </div>
                                            <div class="text-xs text-gray-500">
                                                <%= order.userId?.email || 'N/A' %>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-left">
                                    <div class="text-sm text-gray-200">
                                        <%= new Date(order.createdAt).toLocaleDateString('en-GB') %>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-left">
                                    <div class="text-sm font-medium text-gray-200">â‚¹<%= order.finalAmount %>
                                    </div>
                                </td>
                                <%
  const statusOrder = [
    'pending',
    'confirmed',
    'shipped',
    'delivered',
    'cancelled',
    'return_requested',
    'returned'
  ];
  const currentStatusIndex = statusOrder.indexOf(order.status);
%>

<td class="px-6 py-4 whitespace-nowrap text-left">
  <select class="status-select px-2 py-1 text-xs font-semibold rounded-full"
      data-order-id="<%= order.orderId %>">
    <% statusOrder.forEach((status, index) => { %>
      <option 
        value="<%= status %>" 
        <%= order.status === status ? 'selected' : '' %>
        <%=order.status === 'cancelled' ? 'disabled' : ''%>
        <%=index < currentStatusIndex ? 'disabled' : '' %>
        <%=order.status === 'return_requested' ? 'disabled' : ''%>
        <%=order.status === 'delivered' ? 'disabled' : ''%>
      >
        <%= status.replace('_', ' ').replace(/\b\w/g, c => c.toUpperCase()) %>
      </option>
    <% }) %>
  </select>
</td>

                                
                            <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                            <a href="/admin/order/<%= order.orderId %>">
<button class="view-order text-white hover:underline mr-2">View</button>
                            </a>
                                </td>
                                           </tr>
                                         <% }) %>
                                     </tbody>
                                    </table>
                                  </div>
                                </div>

        <!-- Pagination -->
        <% if (totalPages > 1) { %>
  <div class="bg-black px-6 py-4 border-t border-gray-200  rounded-b-lg">
    <div class="flex justify-between items-center">
      <div class="text-sm text-gray-200">
        Showing
        <span class="font-medium"><%= ((currentPage - 1) * limit) + 1 %></span>
        to
        <span class="font-medium"><%= Math.min(currentPage * limit, totalOrders) %></span>
        of
        <span class="font-medium"><%= totalOrders %></span> orders
      </div>

      <nav class="flex space-x-1">
        <!-- Previous -->
        <% if (currentPage > 1) { 
          const prevParams = new URLSearchParams({
            page: (currentPage - 1).toString(),
            limit: limit.toString(),
            search: search || '',
            sort: sort || '',
            status: status || ''
          });
        %>
          <a href="?<%= prevParams.toString() %>" class="px-3 py-1 rounded-md text-sm font-medium bg-black text-gray-300 hover:bg-gray-950 transition ease-in">
            Previous
          </a>
        <% } else { %>
          <span class="px-3 py-1 rounded-md text-sm font-medium bg-black text-gray-300 hover:bg-gray-950 transition ease-in cursor-not-allowed">
            Previous
          </span>
        <% } %>

        <!-- Dynamic Page Numbers: Max 3 -->
        <% 
          let start = Math.max(1, currentPage - 1);
          let end = Math.min(totalPages, start + 2);
          if (end - start < 2) {
            start = Math.max(1, end - 2);
          }

          for (let i = start; i <= end; i++) {
            const pageParams = new URLSearchParams({
              page: i.toString(),
              limit: limit.toString(),
              search: search || '',
              sort: sort || '',
              status: status || ''
            });
        %>
          <% if (i === currentPage) { %>
            <span class="px-3 py-1 rounded-md text-sm font-medium bg-blue-600 text-white"><%= i %></span>
          <% } else { %>
            <a href="?<%= pageParams.toString() %>" class="px-3 py-1 rounded-md text-sm font-medium bg-gray-200 text-gray-700 hover:bg-gray-300">
              <%= i %>
            </a>
          <% } %>
        <% } %>

        <!-- Next -->
        <% if (currentPage < totalPages) { 
          const nextParams = new URLSearchParams({
            page: (currentPage + 1).toString(),
            limit: limit.toString(),
            search: search || '',
            sort: sort || '',
            status: status || ''
          });
        %>
          <a href="?<%= nextParams.toString() %>" class="px-3 py-1 rounded-md text-sm font-medium bg-black text-gray-300 hover:bg-gray-950 transition ease-in">
            Next
          </a>
        <% } else { %>
          <span class="px-3 py-1 rounded-md text-sm font-medium bg-black text-gray-300 hover:bg-gray-950 transition ease-in cursor-not-allowed">
            Next
          </span>
        <% } %>
      </nav>
    </div>
  </div>
<% } %>


        <!-- Toast Notification -->
        <div id="toast" class="fixed bottom-4 right-4 z-50 hidden">
            <div class="bg-white rounded-lg shadow-lg border-l-4 border-green-500 px-4 py-3 max-w-sm">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-check-circle text-green-500"></i>
                    </div>
                    <div class="ml-3">
                        <p id="toastMessage" class="text-sm font-medium text-gray-900"></p>
                    </div>
                    <div class="ml-auto pl-3">
                        <button id="closeToast" class="text-gray-400 hover:text-gray-500">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- order cancell modal -->
     <div id="cancelOrderModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4 shadow-xl">
            <div class="flex items-center mb-4">
                <i class="fas fa-exclamation-triangle text-red-500 mr-3"></i>
                <h2 class="text-lg font-semibold">Cancel Order</h2>
            </div>
            <p class="text-sm text-gray-700 mb-4">Are you sure you want to cancel this entire order? This action cannot be undone.</p>
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">Reason for cancellation *</label>
                <select id="cancelReason" class="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500">
                  <option value="">Select a reason</option>
                  <option value="Out of stock">Out of stock</option>
                  <option value="Invalid order">Invalid order</option>
                  <option value="Payment not verified">Payment not verified</option>
                  <option value="Customer asked to cancel">Customer asked to cancel</option>
                  <option value="Fraud suspected">Fraud suspected</option>
                  <option value="Other">Other</option>
                </select>

            </div>
            <div id="otherReasonDiv" class="mb-4 hidden">
                <textarea id="otherReason" class="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500" rows="3" placeholder="Please specify your reason"></textarea>
            </div>
            <div class="flex justify-end space-x-3">
                <button id="closeModalBtn" class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 transition-colors">
                    Cancel
                </button>
                <button id="confirmCancelBtn" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors">
                    <i class="fas fa-times mr-2"></i>Confirm Cancellation
                </button>
            </div>
        </div>
    </div>
     <div class="p-4 sm:p-6"></div>
    </main>
<script>

            document.addEventListener('DOMContentLoaded', function () {

                // Close toast functionality
                const closeToast = document.getElementById('closeToast');
                if (closeToast) {
                    closeToast.addEventListener('click', function () {
                        document.getElementById('toast').classList.add('hidden');
                    });
                }

                function showToast(message, type = 'success') {
                  const toast = document.getElementById('toast');
                  const innerDiv = toast.querySelector('div.bg-white');
                  const icon = innerDiv.querySelector('i');
                  const toastMessage = document.getElementById('toastMessage');
                  toastMessage.textContent = message;
                  // Remove previous color classes
                  innerDiv.classList.remove('border-green-500', 'border-red-500');
                  icon.classList.remove('text-green-500', 'text-red-500', 'fa-check-circle', 'fa-exclamation-circle');
                  if (type === 'success') {
                    innerDiv.classList.add('border-green-500');
                    icon.classList.add('fa-check-circle', 'text-green-500');
                  } else {
                    innerDiv.classList.add('border-red-500');
                    icon.classList.add('fa-exclamation-circle', 'text-red-500');
                  }
                  toast.classList.remove('hidden');
                  setTimeout(() => toast.classList.add('hidden'), 3000);
                }

 document.getElementById('confirmCancelBtn').addEventListener('click', async function () {
  const orderId = this.getAttribute('data-order-id');
  const reason = document.getElementById('cancelReason').value;
  const otherReason = document.getElementById('otherReason').value;

  if (!reason) {
    showToast('Please select a reason for cancellation', 'error');
    return;
  }

  const finalReason = reason === 'Other' ? otherReason : reason;

  if (reason === 'Other' && !otherReason.trim()) {
    showToast('Please specify your reason', 'error');
    return;
  }

  try {
    const response = await fetch(`/admin/orders/${orderId}/cancel`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        status: 'cancelled',
        reason: finalReason
      }),
    });

    const data = await response.json();

    if (response.ok && data.success) {
      showToast('Order cancelled successfully');
      document.getElementById('cancelOrderModal').classList.add('hidden');

      // Optionally reload the page or update UI
      setTimeout(() => window.location.reload(), 1000);
    } else {
      showToast(data.message || 'Failed to cancel order', 'error');
    }
  } catch (error) {
    console.error(error);
    showToast('Something went wrong', 'error');
  }
});


document.getElementById('cancelReason').addEventListener('change', function () {
  const otherDiv = document.getElementById('otherReasonDiv');
  if (this.value === 'Other') {
    otherDiv.classList.remove('hidden');
  } else {
    otherDiv.classList.add('hidden');
  }
});

           document.getElementById('closeModalBtn').addEventListener('click', function () {
  document.getElementById('cancelOrderModal').classList.add('hidden');
});
                // Status change functionality
                document.querySelectorAll('.status-select').forEach(select => {
                    const currentStatus = select.value;
                    select.setAttribute('data-original-status', currentStatus);
                    updateStatusStyling(select, currentStatus);
         
                    select.addEventListener('change', async (e) => {
                        const orderId = e.target.dataset.orderId;
                        const newStatus = e.target.value;
                        const originalStatus = e.target.getAttribute('data-original-status');
                        if (newStatus === 'cancelled') {
  document.getElementById('cancelOrderModal').classList.remove('hidden');

  // Set order ID to confirm button
  document.getElementById('confirmCancelBtn').setAttribute('data-order-id', orderId);

  e.target.value = originalStatus;

  return; 
}

  // Rollback Prevention
  const statusOrder = [
    'pending',
    'confirmed',
    'shipped',
    'delivered',
    'cancelled',
    'return_requested',
    'returned'
  ];
  const oldIndex = statusOrder.indexOf(originalStatus);
  const newIndex = statusOrder.indexOf(newStatus);
  if(originalStatus === 'cancelled'){
    showToast('Cancelled orders canâ€™t be updated','error')
    e.target.value = originalStatus
    return
  }
  if(originalStatus === 'delivered'){
    showToast('Delivered orders canâ€™t be updated','error')
    e.target.value = originalStatus
  }

  if (newIndex < oldIndex) {
    showToast('Cannot rollback to a previous status', 'error');
    e.target.value = originalStatus; // Reset to original
    return;
  }

                        try {
                            e.target.disabled = true;
                            e.target.style.opacity = '0.6';

                            const response = await fetch(`/admin/orders/${orderId}/status`, {
                                method: 'PATCH',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ status: newStatus }),
                            });

                            const data = await response.json();

                            if (response.ok && data.success) {
                                showToast('Order status updated successfully');
                                e.target.setAttribute('data-original-status', newStatus);
                                updateStatusStyling(e.target, newStatus);
                                handleStatusSpecificActions(orderId, newStatus);
                            } else {
                                showToast(data.message || 'Failed to update order status', 'error');
                                e.target.value = originalStatus;
                            }
                        } catch (error) {
                            console.error('Error updating status:', error);
                            showToast('An error occurred. Please try again.', 'error');
                            e.target.value = originalStatus;
                        } finally {
                            e.target.disabled = false;
                            e.target.style.opacity = '1';
                        }
                    });
                });

                function updateStatusStyling(selectElement, status) {
                    selectElement.className = selectElement.className.replace(/bg-\w+-\d+/g, '').replace(/text-\w+-\d+/g, '');

                    const statusStyles = {
                        'pending': 'bg-yellow-100 text-yellow-800',
                        'confirmed': 'bg-blue-100 text-blue-800',
                        'shipped': 'bg-purple-100 text-purple-800',
                        'delivered': 'bg-green-100 text-green-800',
                        'cancelled': 'bg-red-100 text-red-800',
                        'return_requested': 'bg-orange-100 text-orange-800',
                        'returned': 'bg-gray-100 text-gray-800'
                    };

                    if (statusStyles[status]) {
                        selectElement.className += ` ${statusStyles[status]}`;
                    }
                }

                function handleStatusSpecificActions(orderId, status) {
                    const verifyReturnButton = document.querySelector(`.verify-return[data-order-id="${orderId}"]`);
                    if (verifyReturnButton) {
                        if (status === 'return_requested') {
                            verifyReturnButton.disabled = false;
                            verifyReturnButton.classList.remove('opacity-50', 'cursor-not-allowed');
                        } else {
                            verifyReturnButton.disabled = true;
                            verifyReturnButton.classList.add('opacity-50', 'cursor-not-allowed');
                        }
                    }
                }
            });
        </script>
    </div>

<%- include('../../views/partials/admin/footer') %>
</body>
</html>