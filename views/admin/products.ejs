<%- include('../partials/admin/header')%>
  <!-- Product Management Content -->
  <div class="p-6">
    <div class="bg-white rounded-lg shadow-sm overflow-hidden mb-6">
      <div class="px-6 py-4 flex justify-between items-center border-b border-gray-200">
        <h3 class="text-lg font-semibold">Product Management</h3>
        <a href="/admin/addProducts">
          <button
            class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">
            <i class="fas fa-plus mr-2"></i> Add Product
          </button>
        </a>

      </div>

      <!-- Search Bar -->
      <div class="p-4 border-b border-gray-200">
        <form id="searchForm" action="/admin/products" method="GET">
          <div class="flex flex-col md:flex-row gap-3">
            <div class="relative flex-grow">
              <input type="text" id="searchInput" name="search" value="<%= searchTerm || '' %>"
                class="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Search products..." />
              <div class="absolute left-3 top-2.5 text-gray-400">
                <i class="fas fa-search"></i>
              </div>
            </div>
            <div class="flex gap-2">
              <button type="submit"
                class="px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50">
                Search
              </button>
              <a href="/admin/products"
                class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 inline-flex items-center justify-center">
                Clear
              </a>
            </div>
          </div>
        </form>
      </div>

      <!-- Products Table -->
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-black">
            <tr>
              <th scope="col" class="px-3 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                Product Name</th>
              <th scope="col" class="px-3 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                Product image</th>
              <th scope="col" class="px-3 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                Regular Price</th>
              <th scope="col" class="px-3 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Sales
                Price</th>
              <th scope="col" class="px-3 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Offer
              </th>
              <th scope="col" class="px-3 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Status
              </th>
              <th scope="col" class="px-3 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                Quantity</th>
              <th scope="col" class="px-3 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                PRODUCT DETAILS</th>

              <th scope="col" class="px-3 py-3 text-right text-xs font-medium text-white uppercase tracking-wider">
                Actions</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            <% if(products && products.length> 0) { %>
              <% products.forEach(product=> { %>
                <tr class="hover:bg-gray-50">
                  <td class="px-2 py-3 whitespace-normal max-w-xs">
                    <div class="text-sm font-medium text-gray-900 break-words">
                      <%= product.productName %>
                    </div>
                  </td>
                  <td class="px-3 py-3 whitespace-normal max-w-xs">
                    <div class="text-sm font-medium text-gray-900 break-words">
                      <img src="/<%= product.productImage[0] %>" alt="<%= product.productName %>"
                        class="w-52 h-16 object-contain">
                    </div>
                  </td>

                  <td class="px-3 py-3 whitespace-nowrap">
                    <div class="text-sm text-gray-500">₹<%= product.regularPrice.toFixed(2) %>
                    </div>
                  </td>
                  <td class="px-3 py-3 whitespace-nowrap">
                    <div class="text-sm text-gray-500">₹<%= product.salePrice.toFixed(2) %>
                    </div>
                  </td>
                  <td class="px-3 py-3 whitespace-nowrap">
                    <% if(product.hasOffer) { %>
                      <span
                        class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                        <%= product.offerPercentage %>% Off
                      </span>
                      <% } else { %>
                        <span
                          class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">No
                          Offer</span>
                        <% } %>
                  </td>
                  <td class="px-3 py-3 whitespace-nowrap">
                    <span
                      class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full <%= !product.isDeleted ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' %>">
                      <%= !product.isDeleted ? 'Active' : 'Deleted' %>
                    </span>
                  </td>
                  <td class="px-3 py-3 whitespace-nowrap">
                    <div class="flex items-center space-x-2">
                      <button type="button" class="px-2 py-1 bg-gray-200 rounded"
                        onclick="decreaseQty('<%= product._id %>')">-</button>

                      <input type="number" id="qty-<%= product._id %>" value="<%= product.quantity %>" min="1"
                        class="w-16 text-center border rounded" onchange="handleQtyChange('<%= product._id %>')">

                      <button type="button" class="px-2 py-1 bg-gray-200 rounded"
                        onclick="increaseQty('<%= product._id %>')">+</button>
                    </div>
                  </td>
                  <td class="px-3 py-3 whitespace-nowrap text-sm font-medium">
                    <a href="/admin/product-details/<%= product._id %>">
                       <button class="text-black hover:underline">View</button>
                    </a>
                  </td>
                  <td class="px-3 py-3 whitespace-nowrap text-right text-sm font-medium">
                    <% if(!product.hasOffer) { %>
                      <button class="text-green-600 hover:text-green-900 mr-2 offer-toggle-button" title="Add Offer"
                        data-action="add" data-id="<%= product._id %>" Lawyer.com" data-name="<%= product.name %>">
                        <i class="fas fa-tag"></i>
                      </button>
                      <% } else { %>
                        <button class="text-amber-600 hover:text-amber-900 mr-2 offer-toggle-button"
                          title="Remove Offer" data-action="remove" data-id="<%= product._id %>"
                          data-name="<%= product.name %>">
                          <i class="fas fa-times"></i><i class="fas fa-tag ml-n1"></i>
                        </button>
                        <% } %>

                          <a href="/admin/productEdit/<%= product._id %>">
                            <button class="text-blue-600 hover:text-blue-900 mr-2 edit-button">
                              <i class="fas fa-edit"></i>
                            </button>
                          </a>



                          <% if(!product.isDeleted) { %>
                            <button class="text-red-600 hover:text-red-900 mr-2 status-toggle-button"
                              title="Delete Product" data-action="delete" data-id="<%= product._id %>"
                              data-name="<%= product.name %>">
                              <i class="fas fa-trash-alt"></i>
                            </button>
                            <% } else { %>
                              <button class="text-green-600 hover:text-green-900 mr-2 status-toggle-button"
                                title="Recover Product" data-action="recover" data-id="<%= product._id %>"
                                data-name="<%= product.name %>">
                                <i class="fas fa-undo"></i>
                              </button>
                              <% } %>
                  </td>
                </tr>
                <% }) %>
                  <% } else { %>
                    <tr>
                      <td colspan="10" class="px-6 py-4 text-center text-sm text-gray-500">
                        No products found.
                        <a href="/admin/addProducts" class="text-blue-600 hover:text-blue-900">Add a new product</a>
                      </td>
                    </tr>
                    <% } %>
          </tbody>
        </table>
      </div>

      <!-- Pagination -->
      <% if(totalPages> 1) { %>
        <div class="px-6 py-4 border-t border-gray-200">
          <div class="flex justify-between items-center">
            <div class="text-sm text-gray-500">
              Showing <span class="font-medium">
                <%= (currentPage - 1) * limit + 1 %>
              </span> to
              <span class="font-medium">
                <%= Math.min(currentPage * limit, totalItems) %>
              </span> of
              <span class="font-medium">
                <%= totalItems %>
              </span> products
            </div>
            <nav class="flex space-x-1">
              <% if(currentPage> 1) { %>
                <a href="/admin/products?page=<%= currentPage - 1 %><%= searchTerm ? `&search=${searchTerm}` : '' %>"
                  class="px-3 py-1 rounded-md text-sm font-medium bg-gray-200 text-gray-700 hover:bg-gray-300">Previous</a>
                <% } else { %>
                  <span
                    class="px-3 py-1 rounded-md text-sm font-medium bg-gray-100 text-gray-400 cursor-not-allowed">Previous</span>
                  <% } %>
                    <% for(let i=1; i <=totalPages; i++) { %>
                      <% if(i===currentPage) { %>
                        <span class="px-3 py-1 rounded-md text-sm font-medium bg-blue-600 text-white">
                          <%= i %>
                        </span>
                        <% } else if(i <=3 || i>= totalPages - 2 || Math.abs(i - currentPage) <= 1) { %>
                            <a href="/admin/products?page=<%= i %><%= searchTerm ? `&search=${searchTerm}` : '' %>"
                              class="px-3 py-1 rounded-md text-sm font-medium bg-gray-200 text-gray-700 hover:bg-gray-300">
                              <%= i %>
                            </a>
                            <% } else if(i===4 && currentPage> 5) { %>
                              <span class="px-3 py-1 text-sm font-medium text-gray-500">...</span>
                              <% } else if(i===totalPages - 3 && currentPage < totalPages - 4) { %>
                                <span class="px-3 py-1 text-sm font-medium text-gray-500">...</span>
                                <% } %>
                                  <% } %>
                                    <% if(currentPage < totalPages) { %>
                                      <a href="/admin/products?page=<%= currentPage + 1 %><%= searchTerm ? `&search=${searchTerm}` : '' %>"
                                        class="px-3 py-1 rounded-md text-sm font-medium bg-gray-200 text-gray-700 hover:bg-gray-300">Next</a>
                                      <% } else { %>
                                        <span
                                          class="px-3 py-1 rounded-md text-sm font-medium bg-gray-100 text-gray-400 cursor-not-allowed">Next</span>
                                        <% } %>
            </nav>
          </div>
        </div>
        <% } %>
    </div>
  </div>

  <!-- Add Product Modal -->
  <div id="productModal"></div>

  <!-- Add Offer Modal -->
  <div id="offerModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
      <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
        <h3 class="text-lg font-semibold" id="offerModalTitle">Add Offer to Product</h3>
        <button class="text-gray-400 hover:text-gray-500 focus:outline-none" id="closeOfferModal">
          <i class="fas fa-times"></i>
        </button>
      </div>
      <form id="offerForm" class="px-6 py-4">
        <input type="hidden" id="offerProductId" />
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-1">Product</label>
          <div class="text-gray-700 font-medium" id="offerProductName"></div>
        </div>
        <div class="mb-4">
          <label for="offerPercentage" class="block text-sm font-medium text-gray-700 mb-1">Offer Percentage (%)</label>
          <input type="number" id="offerPercentage" name="percentage" min="0" max="100" step="0.1" required
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
        </div>
        <div class="flex justify-end space-x-3">
          <button type="button" id="cancelOfferBtn"
            class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50">Cancel</button>
          <button type="submit" id="saveOfferBtn"
            class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">Save
            Offer</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Status Confirmation Modal -->
  <div id="statusModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
      <div class="px-6 py-4 border-b border-gray-200">
        <h3 class="text-lg font-semibold" id="statusModalTitle">Confirm Status Change</h3>
      </div>
      <div class="px-6 py-4">
        <p class="text-gray-700" id="statusModalMessage">Are you sure you want to change the status of this product?</p>
      </div>
      <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
        <button id="cancelStatusBtn"
          class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50">Cancel</button>
        <button id="confirmStatusBtn"
          class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">Confirm</button>
      </div>
      <input type="hidden" id="statusId" />
      <input type="hidden" id="statusAction" />
    </div>
  </div>

  <!-- Remove Offer Confirmation Modal -->
  <div id="removeOfferModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
      <div class="px-6 py-4 border-b border-gray-200">
        <h3 class="text-lg font-semibold text-amber-600">Remove Offer</h3>
      </div>
      <div class="px-6 py-4">
        <p class="text-gray-700">
          Are you sure you want to remove the offer from
          <span id="removeOfferProductName" class="font-semibold"></span>?
        </p>
      </div>
      <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
        <button id="cancelRemoveOfferBtn"
          class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50">Cancel</button>
        <button id="confirmRemoveOfferBtn"
          class="px-4 py-2 bg-amber-600 text-white rounded-lg hover:bg-amber-700 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-opacity-50">Remove
          Offer</button>
      </div>
      <input type="hidden" id="removeOfferId" />
    </div>
  </div>

  <!-- Toast Notification -->
  <div id="toast" class="fixed bottom-4 right-4 z-50 hidden">
    <div class="bg-white rounded-lg shadow-lg border-l-4 border-green-500 px-4 py-3 max-w-sm">
      <div class="flex items-center">
        <div class="flex-shrink-0">
          <i class="fas fa-check-circle text-green-500"></i>
        </div>
        <div class="ml-3">
          <p id="toastMessage" class="text-sm font-medium text-gray-900"></p>
        </div>
        <div class="ml-auto pl-3">
          <button id="closeToast" class="text-gray-400 hover:text-gray-500">
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      // Modal elements
      const productModal = document.getElementById("productModal");
      const offerModal = document.getElementById("offerModal");
      const statusModal = document.getElementById("statusModal");
      const removeOfferModal = document.getElementById("removeOfferModal");
      const toast = document.getElementById("toast");

      // Form elements
      const productForm = document.getElementById("productForm");
      const offerForm = document.getElementById("offerForm");
      const modalTitle = document.getElementById("modalTitle");
      const productId = document.getElementById("productId");
      const productName = document.getElementById("productName");
      const productBrand = document.getElementById("productBrand");
      const productCategory = document.getElementById("productCategory");
      const regularPrice = document.getElementById("regularPrice");
      const salesPrice = document.getElementById("salesPrice");
      const quantity = document.getElementById("quantity");
      const statusId = document.getElementById("statusId");
      const statusAction = document.getElementById("statusAction");
      const statusModalTitle = document.getElementById("statusModalTitle");
      const statusModalMessage = document.getElementById("statusModalMessage");
      const offerProductId = document.getElementById("offerProductId");
      const offerProductName = document.getElementById("offerProductName");
      const removeOfferId = document.getElementById("removeOfferId");
      const removeOfferProductName = document.getElementById("removeOfferProductName");

      // Buttons
      const closeModal = document.getElementById("closeModal");
      const closeOfferModal = document.getElementById("closeOfferModal");
      const cancelBtn = document.getElementById("cancelBtn");
      const cancelOfferBtn = document.getElementById("cancelOfferBtn");
      const closeToast = document.getElementById("closeToast");
      const cancelStatusBtn = document.getElementById("cancelStatusBtn");
      const confirmStatusBtn = document.getElementById("confirmStatusBtn");
      const cancelRemoveOfferBtn = document.getElementById("cancelRemoveOfferBtn");
      const confirmRemoveOfferBtn = document.getElementById("confirmRemoveOfferBtn");


      // Close modals
      if (closeModal) closeModal.addEventListener("click", closeAllModals);
      if (closeOfferModal) closeOfferModal.addEventListener("click", closeAllModals);
      if (cancelBtn) cancelBtn.addEventListener("click", closeAllModals);
      if (cancelOfferBtn) cancelOfferBtn.addEventListener("click", closeAllModals);
      if (cancelStatusBtn) cancelStatusBtn.addEventListener("click", closeAllModals);
      if (cancelRemoveOfferBtn) cancelRemoveOfferBtn.addEventListener("click", closeAllModals);

      // Close toast
      if (closeToast) {
        closeToast.addEventListener("click", function () {
          toast.classList.add("hidden");
        });
      }

      // Status toggle button functionality (Delete/Recover)
      document.querySelectorAll(".status-toggle-button").forEach((button) => {
        button.addEventListener("click", function () {
          const id = this.getAttribute("data-id");
          const name = this.getAttribute("data-name");
          const action = this.getAttribute("data-action");

          openStatusModal(id, name, action);
        });
      });

      // Offer toggle button functionality (Add/Remove Offer)
      document.querySelectorAll(".offer-toggle-button").forEach((button) => {
        button.addEventListener("click", function () {
          const id = this.getAttribute("data-id");
          const name = this.getAttribute("data-name");
          const action = this.getAttribute("data-action");

          if (action === "add") {
            openAddOfferModal(id, name);
          } else {
            openRemoveOfferModal(id, name);
          }
        });
      });

      // Product form validation and submission
      if (productForm) {
        productForm.addEventListener("submit", function (e) {
          e.preventDefault();

          if (!validateProductForm()) {
            return false;
          }

          const id = productId.value;
          const name = productName.value;
          const brand = productBrand.value;
          const category = productCategory.value;
          const regularPriceVal = parseFloat(regularPrice.value);
          const salesPriceVal = parseFloat(salesPrice.value);
          const quantityVal = parseInt(quantity.value);

          const endpoint = id ? `/admin/products/${id}` : "/admin/products";
          const method = id ? "PUT" : "POST";

          fetch(endpoint, {
            method: method,
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              name,
              brand,
              category,
              regularPrice: regularPriceVal,
              salesPrice: salesPriceVal,
              quantity: quantityVal,
            }),
          })
            .then(handleResponse)
            .then((data) => {
              if (data.success) {
                closeAllModals();
                showToast(data.message);
                reloadPageAfterDelay();
              } else {
                showToast(data.message || "An error occurred", "error");
              }
            })
            .catch(handleError);

          return false;
        });
      }

      // Offer form validation and submission
      if (offerForm) {
        offerForm.addEventListener("submit", function (e) {
          e.preventDefault();

          if (!validateOfferForm()) {
            return false;
          }

          const id = offerProductId.value;
          const percentage = parseFloat(document.getElementById("offerPercentage").value);

          fetch(`/admin/products/${id}/offer`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              offerPercentage: percentage,
            }),
          })
            .then(handleResponse)
            .then((data) => {
              if (data.success) {
                closeAllModals();
                showToast(data.message);
                reloadPageAfterDelay();
              } else {
                showToast(data.message || "An error occurred", "error");
              }
            })
            .catch(handleError);

          return false;
        });
      }

      // Confirm status change (Delete/Recover)
      if (confirmStatusBtn) {
        confirmStatusBtn.addEventListener("click", function () {
          const id = statusId.value;
          const action = statusAction.value;
          const endpoint = `/admin/products/${id}/status`;

          fetch(endpoint, {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              action: action,
            }),
          })
            .then(handleResponse)
            .then((data) => {
              if (data.success) {
                closeAllModals();
                showToast(data.message);
                reloadPageAfterDelay();
              } else {
                showToast(data.message || "An error occurred", "error");
              }
            })
            .catch(handleError);
        });
      }

      // Confirm remove offer
      if (confirmRemoveOfferBtn) {
        confirmRemoveOfferBtn.addEventListener("click", function () {
          const id = removeOfferId.value;

          fetch(`/admin/products/${id}/offer`, {
            method: "DELETE",
          })
            .then(handleResponse)
            .then((data) => {
              if (data.success) {
                closeAllModals();
                showToast(data.message);
                reloadPageAfterDelay();
              } else {
                showToast(data.message || "An error occurred", "error");
              }
            })
            .catch(handleError);
        });
      }




      // DELETE RECOVER
      function openStatusModal(id, name, action) {
        statusId.value = id;
        statusAction.value = action;
        if (action === "delete") {
          statusModalTitle.textContent = "Delete Product";
          statusModalMessage.innerHTML = `Are you sure you want to delete <span class="font-semibold">${name}</span>?`;
          confirmStatusBtn.className = "px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50";
          confirmStatusBtn.textContent = "Delete";
        } else {
          statusModalTitle.textContent = "Recover Product";
          statusModalMessage.innerHTML = `Are you sure you want to recover <span class="font-semibold">${name}</span>?`;
          confirmStatusBtn.className = "px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50";
          confirmStatusBtn.textContent = "Recover";
        }

        statusModal.classList.remove("hidden");
        statusModal.classList.add("flex");
      }

      function openAddOfferModal(id, name) {
        offerProductId.value = id;
        offerProductName.textContent = name;
        document.getElementById("offerPercentage").value = "";

        offerModal.classList.remove("hidden");
        offerModal.classList.add("flex");
      }

      function openRemoveOfferModal(id, name) {
        removeOfferId.value = id;
        removeOfferProductName.textContent = name;

        removeOfferModal.classList.remove("hidden");
        removeOfferModal.classList.add("flex");
      }

      function closeAllModals() {
        productModal.classList.add("hidden");
        productModal.classList.remove("flex");
        offerModal.classList.add("hidden");
        offerModal.classList.remove("flex");
        statusModal.classList.add("hidden");
        statusModal.classList.remove("flex");
        removeOfferModal.classList.add("hidden");
        removeOfferModal.classList.remove("flex");
      }

      function showToast(message, type = "success") {
        const toastMessage = document.getElementById("toastMessage");
        const toastElement = document.getElementById("toast");

        toastMessage.textContent = message;

        if (type === "error") {
          toastElement.querySelector("div").classList.remove("border-green-500");
          toastElement.querySelector("div").classList.add("border-red-500");
          toastElement.querySelector("i").classList.remove("text-green-500");
          toastElement.querySelector("i").classList.add("text-red-500");
          toastElement.querySelector("i").classList.remove("fa-check-circle");
          toastElement.querySelector("i").classList.add("fa-exclamation-circle");
        } else {
          toastElement.querySelector("div").classList.remove("border-red-500");
          toastElement.querySelector("div").classList.add("border-green-500");
          toastElement.querySelector("i").classList.remove("text-red-500");
          toastElement.querySelector("i").classList.add("text-green-500");
          toastElement.querySelector("i").classList.remove("fa-exclamation-circle");
          toastElement.querySelector("i").classList.add("fa-check-circle");
        }

        toastElement.classList.remove("hidden");

        setTimeout(() => {
          toastElement.classList.add("hidden");
        }, 5000);
      }

      function validateProductForm() {
        const name = productName.value.trim();
        const regularPriceVal = parseFloat(regularPrice.value);
        const salesPriceVal = parseFloat(salesPrice.value);
        const quantityVal = parseInt(quantity.value);

        if (!name) {
          showToast("Product name is required", "error");
          return false;
        } else if (!/^[a-zA-Z\s]+$/.test(name)) {
          showToast("Product name should contain only alphabetic characters", "error");
          return false;
        }

        if (isNaN(regularPriceVal) || regularPriceVal < 0) {
          showToast("Please enter a valid regular price", "error");
          return false;
        }

        if (isNaN(salesPriceVal) || salesPriceVal < 0) {
          showToast("Please enter a valid sales price", "error");
          return false;
        }

        if (isNaN(quantityVal) || quantityVal < 0) {
          showToast("Please enter a valid quantity", "error");
          return false;
        }

        return true;
      }

      function validateOfferForm() {
        const percentage = parseFloat(document.getElementById("offerPercentage").value);

        if (isNaN(percentage) || percentage < 1 || percentage > 99) {
          showToast("Please enter a valid percentage between 1 and 99", "error");
          return false;
        }

        return true;
      }

      function handleResponse(response) {
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        return response.json();
      }

      function handleError(error) {
        console.error("Error:", error);
        showToast("An error occurred. Please try again.", "error");
      }

      function reloadPageAfterDelay(delay = 1000) {
        setTimeout(() => {
          window.location.reload();
        }, delay);
      }
    });


    function increaseQty(id) {
      const input = document.getElementById(`qty-${id}`);
      input.value = parseInt(input.value) + 1;
      updateQuantity(id, input.value);
    }

    function decreaseQty(id) {
      const input = document.getElementById(`qty-${id}`);
      if (parseInt(input.value) > 0) {
        input.value = parseInt(input.value) - 1;
        updateQuantity(id, input.value);
      }
    }

    function handleQtyChange(id) {
      const input = document.getElementById(`qty-${id}`);
      let value = parseInt(input.value);
      if (isNaN(value) || value < 1) {
        value = 1;
        input.value = value;
      }
      updateQuantity(id, value);
    }

    function updateQuantity(productId, quantity) {
      fetch(`/admin/update-quantity/${productId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ quantity })
      })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            showToast("Quantity updated", 'success');
          } else {
            showToast("Update failed", 'error');
          }
        })
        .catch(err => {
          showToast("Error updating quantity", 'error');
        });
    }
  </script>

  <%- include('../partials/admin/footer')%>