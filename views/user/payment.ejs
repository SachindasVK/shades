<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Payment Selection (Checkout Step 3)</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        :root {
            --primary-color: #000000;
            --text-color: #333333;
            --light-bg: #ffffff;
            --border-color: #dee2e6;
            --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            --black-color: #000000;
        }

        body {
            background-color: var(--light-bg);
            color: var(--text-color);
            font-family: 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            margin: 0;
        }

        .progress-section {
            background-color: white;
            border-radius: 15px;
            padding: 1.5rem;
           
             border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
        }

        .progress-step {
            display: flex;
            align-items: center;
            flex: 1;
            justify-content: center;
        }

        .progress-step .step-circle {
            width: 1.75rem;
            height: 1.75rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
            font-weight: 600;
            transition: all 0.3s ease;
            background-color: #e5e7eb;
            color: #6b7280;
        }

        .progress-step.active .step-circle {
            background-color: #000000;
            color: white;
        }

        .progress-step.completed .step-circle {
            background-color: #424242;
            color: white;
        }

        .progress-step .step-label {
            margin-left: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            color: #6b7280;
        }

        .progress-step.active .step-label {
            font-weight: 600;
            color: #000000;
        }

        .main-section,
        .order-summary {
            background-color: white;
            border-radius: 15px;
             border-top-left-radius: 0;
  border-top-right-radius: 0;
            padding: 1.5rem;
            
        }

        .main-section h2,
        .order-summary h4 {
            font-size: 1.25rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: #1f2937;
        }

        .info-section {
            margin-bottom: 1.5rem;
        }

        .info-section .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .info-section .header a {
            font-size: 0.875rem;
            color: #3b82f6;
            text-decoration: none;
        }

        .info-section p {
            color: #4b5563;
            font-size: 0.875rem;
            margin: 0.2rem 0;
        }

        .payment-option {
            display: flex;
            align-items: center;
            padding: 1rem;
            border-radius: 0.5rem;
            margin-bottom: 0.75rem;
            border: 1px solid #e5e7eb;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .payment-option:hover:not(.disabled) {
            border-color: #d1d5db;
        }

        .payment-option.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .payment-option input {
            margin-right: 0.75rem;
            accent-color: #000000;
        }

        .payment-option .icon {
            margin-right: 0.75rem;
            font-size: 1.25rem;
            color: #6b7280;
        }

        .payment-option .icon.online {
            color: #3b82f6;
        }

        .payment-option .icon.wallet {
            color: #000000;
        }

        .payment-option .details {
            flex: 1;
        }

        .payment-option .details .title {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .payment-option .details .title span {
            font-weight: 600;
            font-size: 0.9375rem;
            color: #1f2937;
        }

        .payment-option .details .title .not-eligible {
            font-size: 0.75rem;
            color: #ef4444;
        }

        .payment-option .details .title .eligible {
            font-size: 0.75rem;
            color: #10b981;
        }

        .payment-option .details .title .balance {
            font-size: 0.875rem;
            color: #4b5563;
        }

        .payment-option .details p {
            color: #4b5563;
            font-size: 0.75rem;
            margin: 0.2rem 0;
        }

        .payment-option.selected {
            border: 2px solid var(--black-color);
            background-color: #f8fafc;
        }

        .navigation-buttons {
            display: flex;
            gap: 0.5rem;
            margin-top: 1.5rem;
            justify-content: flex-start;
        }

        .navigation-buttons a button {
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-size: 0.90rem;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid var(--black-color);
            color: var(--black-color);
            background-color: transparent;
        }

        .navigation-buttons a button:hover {
            background-color: #e5e7eb;
        }

        .order-summary {
            position: sticky;
            top: 20px;
        }

        .coupon-section {
            margin-bottom: 1rem;
            display: flex;
            gap: 0.5rem;
        }

        .coupon-section input {
            flex: 1;
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 0.5rem;
            font-size: 0.90rem;
        }

        .coupon-section input:focus {
            border-color: #000000;
            box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
            outline: none;
        }

        .coupon-section button {
            padding: 0.5rem 1rem;
            background-color: var(--black-color);
            color: white;
            border: none;
            border-radius: 0.5rem;
            font-size: 0.90rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .coupon-section button:hover {
            background-color: #333333;
        }

        .applied-coupon {
            background-color: #e6f7fa; /* Lighter background as in the image */
            padding: 0.5rem 0.75rem;
            border-radius: 0.25rem;
            margin-bottom: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .applied-coupon .coupon-info {
            font-size: 0.875rem;
            color: #4b5563;
            font-weight: 500;
        }

        .applied-coupon .coupon-info .code {
            font-weight: 600;
            color: #1f2937;
        }

        .applied-coupon .coupon-info .discount {
            color: #10b981;
        }

        .applied-coupon button {
            background-color: transparent;
            border: none; /* Remove border */
            color: #ff0000; /* Red color for the Remove link */
            font-size: 0.75rem;
            font-weight: 500;
            text-transform: uppercase;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .applied-coupon button:hover {
            color: #cc0000; /* Slightly darker red on hover */
        }

        .available-coupons {
            background-color: #f9fafb;
            padding: 0.75rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .available-coupons .coupon-info {
            font-size: 0.875rem;
        }

        .available-coupons .coupon-info .code {
            color: #1f2937;
            font-weight: 600;
        }

        .available-coupons .coupon-info .discount {
            color: #10b981;
        }

        .available-coupons .coupon-info .condition {
            color: #4b5563;
            font-size: 0.75rem;
        }

        .available-coupons button {
            background-color: transparent;
            border: 1px solid var(--black-color);
            color: var(--black-color);
            padding: 0.25rem 0.75rem;
            border-radius: 0.5rem;
            font-size: 0.75rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .available-coupons button:hover {
            background-color: var(--black-color);
            color: white;
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.75rem;
            font-size: 0.9rem;
            color: #4b5563;
        }

        .summary-item.discount {
            color: #10b981;
        }

        .summary-item.free {
            color: #10b981;
        }

        .summary-item.total {
            font-size: 1rem;
            font-weight: 700;
            margin-top: 1rem;
            color: #1f2937;
            border-top: 1px solid #e5e7eb;
            padding-top: 1rem;
        }

        .place-order-btn {
            width: 100%;
            background-color: var(--black-color);
            color: white;
            border: none;
            border-radius: 0.5rem;
            padding: 0.75rem;
            font-weight: 600;
            font-size: 1rem;
            transition: background-color 0.3s ease;
            margin-top: 1rem;
            cursor: pointer;
        }

        .place-order-btn:hover {
            background-color: #333333;
        }

        .place-order-btn:disabled {
            background-color: #1e1f20;
            cursor: not-allowed;
        }

        .loading {
            pointer-events: none;
        }

        #toastContainer {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1000;
        }

        .toast {
            min-width: 250px;
            padding: 12px 24px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            margin-bottom: 8px;
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s ease;
        }

        .toast.show {
            transform: translateY(0);
            opacity: 1;
        }

        .toast.success { background-color: #10b981; }
        .toast.error { background-color: #ef4444; }
        .toast.warning { background-color: #f59e0b; }
        .toast.info { background-color: #3b82f6; }

        @media (max-width: 991.98px) {
            .order-summary {
                position: static;
            }
        }

        @media (max-width: 767.98px) {
            .main-section,
            .order-summary {
                padding: 1rem;
            }
            
            .progress-step .step-label {
                display: none;
            }
        }
    </style>
</head>

<body>
    <%-include("../../views/partials/user/header")%>

    <div class="container max-w-6xl mx-auto px-4 py-6 mb-20">
        <!-- Progress Indicator -->
        <div class="progress-section">
            <div style="display: flex; justify-content: space-between; gap: 0.75rem;">
                <div class="progress-step completed">
                    <div class="step-circle" aria-label="Step 1: Address">1</div>
                    <span class="step-label">Address</span>
                </div>
                <div class="progress-step completed">
                    <div class="step-circle" aria-label="Step 2: Shipping">2</div>
                    <span class="step-label">Shipping</span>
                </div>
                <div class="progress-step active">
                    <div class="step-circle" aria-label="Step 3: Payment">3</div>
                    <span class="step-label">Payment</span>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap: 4;">
            <!-- Main Content -->
            <div class="col-span-2">
                <div class="main-section">
                    <!-- Section: Shipping Address -->
                    <div class="info-section">
                        <div class="header">
                            <h2>Shipping Address</h2>
                            <a href="/select-address">Change</a>
                        </div>
                        <p>
                            <%= address.streetAddress %>, <%= address.area %>, <%= address.city %>, <%= address.state %> - <%= address.pincode %>
                        </p>
                    </div>

                    <!-- Section: Contact Details -->
                    <div class="info-section">
                        <h2>Contact Details</h2>
                        <p>Email: <%= user.email || "No email found" %><br>
                           Phone: <%= address.phone || "No phone number found" %>
                        </p>
                    </div>

                    <!-- Section: Delivery Date -->
                    <div class="info-section">
                        <h2>Delivery Date</h2>
                        <p>Expected delivery by <%= expectedDeliveryDate%> ( <%=shippingMethod%> )</p>
                    </div>

                    <!-- Section: Payment Method -->
                    <div class="info-section">
                        <h2>Payment Method</h2>
                        <div class="payment-option <%= !isCodEligible ? 'disabled' : '' %>" data-method="cod">
                            <input type="radio" name="paymentMethod" id="cod" value="cod" <%= !isCodEligible ? 'disabled' : '' %>>
                            <i class="fas fa-money-bill-wave icon"></i>
                            <div class="details">
                                <div class="title">
                                    <span>Cash on Delivery</span>
                                    <% if (!isCodEligible) { %>
                                        <span class="not-eligible">( Not eligible for this order )</span>
                                    <% } else { %>
                                        <span class="eligible">( Eligible for this order )</span>
                                    <% } %>
                                </div>
                                <p>Pay when you receive your order</p>
                            </div>
                        </div>
                        <div class="payment-option selected" data-method="online">
                            <input type="radio" name="paymentMethod" id="online" value="online">
                           <p>
 <img src="https://razorpay.com/assets/razorpay-glyph.svg" alt="Razorpay" class="h-10 w-10">
                           </p> 
                           
                            <div class="details">
                                <div class="title">
                                    <span>Secure Online Payment</span>
                                </div>
                                <p>Credit/Debit Cards, UPI, Net Banking</p>
                            </div>
                        </div>
                        <div class="payment-option" data-method="wallet">
                            <input type="radio" name="paymentMethod" id="wallet" value="wallet">
                            <i class="fas fa-wallet icon wallet"></i>
                            <div class="details">
                                <div class="title">
                                    <span>Wallet</span>
                                    <span class="balance">Balance: ₹<%= walletBalance.toFixed(2) %></span>
                                </div>
                                <p>Pay using your wallet balance</p>
                            </div>
                        </div>
                    </div>

                    <!-- Navigation Buttons -->
                    <div class="navigation-buttons">
                        <a href="/shipping">
                            <button aria-label="Go to shipping method">Go to Ship Method</button>
                        </a>
                    </div>
                </div>
            </div>

            <!-- Order Summary Section -->
            <div class="col-span-1">
                <div class="order-summary">
                    <h4>Order Summary</h4>
                    <div class="coupon-section">
                        <input type="text" placeholder="Enter code" id="couponInput">
                        <button id="applyCouponBtn">APPLY</button>
                    </div>
                    <div id="applied-coupon-container"></div>
                    <div class="available-coupons-list">
                        <% if (coupons && coupons.length > 0) { %>
                            <% coupons.forEach(coupon => { %>
                                <div class="available-coupons">
                                    <div class="coupon-info">
                                        <div class="code"><%= coupon.name %></div>
                                        <div class="discount">Get Instant Discount ₹<%= coupon.offerPrice %></div>
                                        <div class="condition">Valid on orders above ₹<%= coupon.minimumPrice %></div>
                                    </div>
                                    <button class="applyCouponBtn" data-code="<%= coupon.name %>" 
                                            data-discount="<%= coupon.offerPrice %>" 
                                            data-minprice="<%= coupon.minimumPrice %>">APPLY</button>
                                </div>
                            <% }) %>
                        <% } else { %>
                            <p>No available coupons right now.</p>
                        <% } %>
                    </div>
                    
                    <div id="order-summary-items">
                        <% if (cartItems && cartItems.length > 0) { %>
                            <% 
                                let subtotal = 0;
                                cartItems.forEach(item => {
                                    subtotal += (item.productId.salePrice || item.productId.regularPrice || 0) * item.quantity;
                                });
                                let discount = subtotal > 1500 ? 200 : 0;
                                let deliveryCharge = subtotal > 2000 ? 0 : 50;
                                let gst = Math.round(subtotal * 0.18);
                                let total = subtotal + deliveryCharge + gst - discount;
                            %>
                            <div class="summary-item">
                                <span>Subtotal (<%= cartItems.length %> items)</span>
                                <span id="subtotal-amount">₹<%= subtotal.toLocaleString('en-IN') %></span>
                            </div>
                            <div class="summary-item discount">
                                <span>Discount</span>
                                <span id="discount-amount">- ₹<%= discount.toLocaleString('en-IN') %></span>
                            </div>
                            <div class="summary-item">
                                <span>Delivery Charge</span>
                                <span id="delivery-charge">
                                    <% if (deliveryCharge === 0) { %>
                                        <span style="text-decoration: line-through; color: rgb(255, 38, 38);">₹50</span>
                                          FREE DELIVERY
                                    <% } else { %>
                                        ₹<%= deliveryCharge.toLocaleString('en-IN') %>
                                    <% } %>
                                </span>
                            </div>
                            <div class="summary-item">
                                <span>GST (18%)</span>
                                <span id="gst-amount">₹<%= gst.toLocaleString('en-IN') %></span>
                            </div>
                            <div class="summary-item total">
                                <span>TOTAL</span>
                                <span id="total-amount">₹<%= total.toLocaleString('en-IN') %></span>
                            </div>
                        <% } else { %>
                            <div class="summary-item">
                                <span>Subtotal (0 items)</span>
                                <span>₹0</span>
                            </div>
                            <div class="summary-item total">
                                <span>TOTAL</span>
                                <span>₹0</span>
                            </div>
                        <% } %>
                    </div>
                    
                    <button id="placeOrderButton" class="place-order-btn">Place Order</button>
                </div>
            </div>
        </div>
    </div>

    <div id="toastContainer"></div>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        // Get dynamic data from server
        const cartItems = <%- JSON.stringify(cartItems || []) %>;
        const availableCoupons = <%- JSON.stringify(coupons || []) %>;
        const walletBalance = <%= walletBalance || 0 %>;
        const isCodEligible = <%= isCodEligible || false %>;
        
        let appliedCouponDiscount = 0;
        let appliedCouponCode = '';

        // Calculate initial order summary
        function calculateOrderSummary() {
            let subtotal = 0;
            if (cartItems && cartItems.length > 0) {
                cartItems.forEach(item => {
                    const price = item.productId.salePrice || item.productId.regularPrice || 0;
                    subtotal += price * item.quantity;
                });
            }
            
            let baseDiscount = subtotal > 1500 ? 200 : 0;
            let totalDiscount = baseDiscount + appliedCouponDiscount;
            let deliveryCharge = subtotal > 2000 ? 0 : 50;
            let gst = Math.round(subtotal * 0.18);
            let total = subtotal + deliveryCharge + gst - totalDiscount;
            
            return { subtotal, totalDiscount, deliveryCharge, gst, total };
        }

        // Update order summary display
        function updateOrderSummary() {
            const summary = calculateOrderSummary();
            
            if (document.getElementById('subtotal-amount')) {
                document.getElementById('subtotal-amount').textContent = `₹${summary.subtotal.toLocaleString('en-IN')}`;
            }
            if (document.getElementById('discount-amount')) {
                document.getElementById('discount-amount').textContent = `- ₹${summary.totalDiscount.toLocaleString('en-IN')}`;
            }
            if (document.getElementById('gst-amount')) {
                document.getElementById('gst-amount').textContent = `₹${summary.gst.toLocaleString('en-IN')}`;
            }
            if (document.getElementById('total-amount')) {
                document.getElementById('total-amount').textContent = `₹${summary.total.toLocaleString('en-IN')}`;
            }
            
            // Update delivery charge display
            const deliveryElement = document.getElementById('delivery-charge');
            if (deliveryElement) {
                if (summary.deliveryCharge === 0) {
                    deliveryElement.innerHTML = '<span style="text-decoration: line-through; color: rgb(255, 38, 38);">₹50</span>   FREE DELIVERY';
                } else {
                    deliveryElement.textContent = `₹${summary.deliveryCharge.toLocaleString('en-IN')}`;
                }
            }
            
            // Update applied coupon display
            const appliedCouponContainer = document.getElementById('applied-coupon-container');
            if (appliedCouponCode) {
                const coupon = availableCoupons.find(c => c.name === appliedCouponCode);
                if (coupon) {
                    appliedCouponContainer.innerHTML = `
                        <div class="applied-coupon">
                            <div class="coupon-info">
                                Applied: <span class="code">${coupon.name}</span> (₹${coupon.offerPrice} off)
                            </div>
                            <button id="removeCouponBtn">Remove</button>
                        </div>
                    `;
                    // Add event listener for remove button
                    document.getElementById('removeCouponBtn').addEventListener('click', removeCoupon);
                }
            } else {
                appliedCouponContainer.innerHTML = '';
            }
        }

        // Apply coupon functionality
        function applyCoupon(couponCode = null) {
            const inputCode = couponCode || document.getElementById('couponInput').value.trim();
            const summary = calculateOrderSummary();
            
            if (!inputCode) {
                showToast('Please enter a coupon code', 'error');
                return;
            }
            
            const coupon = availableCoupons.find(c => c.name === inputCode);
           
            if (!coupon) {
                showToast('Invalid coupon code', 'error');
                appliedCouponDiscount = 0;
                appliedCouponCode = '';
            } else if (summary.subtotal < coupon.minimumPrice) {
                showToast(`Minimum order should be ₹${coupon.minimumPrice}`, 'error');
                appliedCouponDiscount = 0;
                appliedCouponCode = '';
            } else {
                appliedCouponDiscount = coupon.offerPrice;
                appliedCouponCode = coupon.name;
                document.getElementById('couponInput').value = coupon.name;
                showToast(`Coupon applied: ₹${coupon.offerPrice} OFF`, 'success');
            }
            
            updateOrderSummary();
        }

        // Remove coupon functionality
        function removeCoupon() {
            appliedCouponDiscount = 0;
            appliedCouponCode = '';
            document.getElementById('couponInput').value = '';
            showToast('Coupon removed', 'info');
            updateOrderSummary();
        }

        // Update payment option styles
        function updatePaymentOptionStyles() {
            document.querySelectorAll('.payment-option').forEach(option => {
                const input = option.querySelector('input');
                if (input && input.checked) {
                    option.classList.add('selected');
                } else {
                    option.classList.remove('selected');
                }
            });
        }

        // Place order handler
        async function placeOrderHandler() {
    const selectedMethodInput = document.querySelector('input[name="paymentMethod"]:checked');
    
    if (!selectedMethodInput) {
        showToast('Please select a payment method', 'error');
        return;
    }
    
    const selectedMethod = selectedMethodInput.value;
    
    if (selectedMethod === 'cod' && !isCodEligible) {
        showToast('Cash on Delivery is not eligible for this order', 'error');
        return;
    }
    
    if (selectedMethod === 'wallet') {
        const summary = calculateOrderSummary();
        if (summary.total > walletBalance) {
            showToast('Insufficient wallet balance', 'error');
            return;
        }
    }
    
    try {
        showLoading(true);
        
        const response = await fetch('/place-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                paymentMethod: selectedMethod,
                appliedCoupon: appliedCouponCode || null,
                couponDiscount: appliedCouponDiscount || 0
            })
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.message || 'Failed to place order');
        }
        
        if (result.success) {
            if (result.paymentRequired && selectedMethod === 'online') {
                // Handle Razorpay payment
                await handleRazorpayPayment(result.orderId);
            } else {
                // Direct success for COD/Wallet
                showToast('Order placed successfully!', 'success');
                setTimeout(() => {
                    window.location.href = result.redirectUrl;
                }, 1500);
            }
        } else {
            throw new Error(result.message || 'Failed to place order');
        }
        
    } catch (error) {
        console.error('Order placement error:', error);
        showToast(error.message || 'Failed to place order', 'error');
    } finally {
        showLoading(false);
    }
}



async function handleRazorpayPayment(orderDbId) {
    try {
        const res = await fetch(`/payment/${orderDbId}`);
        const data = await res.json();
        
        if (!data.success) {
          return showToast('Could not initiate payment', 'error');
        }
        
          const options = {
          key: data.razorpayKey,
          amount: data.amount,
          currency: "INR",
          name: "SHADES",
          description: "Retry Payment",
          order_id: data.orderId,
          handler: function (response) {
            fetch("/verify-payment", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                ...response,
                orderDbId
              })
            }).then(res => res.json())
              .then(result => {
                if (result.success) {
                    window.location.href = `/order-confirmation/${orderDbId}`;
                } else {
                  showToast('Verification Failed', 'Could not verify payment.', 'error');
                }
              });
          },
          modal: {
            ondismiss: function () {
              fetch('/payment-failed', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  orderDbId,
                  reason: 'User cancelled the payment.'
                })
              });
              showToast('Cancelled', 'Payment process was cancelled.', 'info');
            }
          },
          theme: { color: "#000000" }
        };

        const rzp = new Razorpay(options);

        rzp.on('payment.failed', function (response) {
  fetch('/payment-failed', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      orderDbId,
      reason: response.error.description,
      error: response.error
    })
  }).then(() => {
    setTimeout(()=>{
window.location.href = '/orders?payment=failed';
    },2000)
    
  });
});

        rzp.open();
        
    } catch (error) {
        console.error('Razorpay initialization error:', error);
        showToast('Failed to initialize payment', 'error');
        handlePaymentFailure(orderDbId, error.message);
    }
}
        
        function showToast(message, type = 'info') {
    let toastContainer = document.querySelector('.toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.className = 'toast-container';
        toastContainer.style.position = 'fixed';
        toastContainer.style.top = '20px';
        toastContainer.style.right = '20px';
        toastContainer.style.zIndex = '9999';
        toastContainer.style.display = 'flex';
        toastContainer.style.flexDirection = 'column';
        toastContainer.style.gap = '10px';
        document.body.appendChild(toastContainer);
    }

    const toastId = 'toast-' + Date.now();
    const toast = document.createElement('div');

    // Background and border color based on toast type
    let bgColor, borderColor;
    switch (type) {
        case 'success':
            bgColor = '#15803d';  // green
            borderColor = '#15803d';
            break;
        case 'error':
            bgColor = '#dc2626';  // red
            borderColor = '#dc2626';
            break;
        case 'info':
        default:
            bgColor = '#2563eb';  // blue
            borderColor = '#2563eb';
    }

    // Toast styles
    toast.style.cssText = `
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: ${bgColor};
        border-left: 4px solid ${borderColor};
        color: white;
        padding: 8px 16px;
        border-radius: 5px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        max-width: 300px;
        width: 100%;
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.3s ease, transform 0.3s ease;
    `;

    toast.id = toastId;
    toast.setAttribute('role', 'alert');
    toast.setAttribute('aria-live', 'assertive');
    toast.setAttribute('aria-atomic', 'true');

    toast.innerHTML = `
        <div style="flex: 1; font-size: 14px;">${message}</div>
        <button type="button" style="margin-left: 12px; background: none; border: none; color: white; font-size: 16px; cursor: pointer;" data-toast-id="${toastId}">
            &times;
        </button>
    `;

    toastContainer.appendChild(toast);

    // Animate in
    setTimeout(() => {
        toast.style.opacity = '1';
        toast.style.transform = 'translateY(0)';
    }, 100);

    // Close on button click
    const closeButton = toast.querySelector(`[data-toast-id="${toastId}"]`);
    closeButton.addEventListener('click', () => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateY(20px)';
        setTimeout(() => toast.remove(), 300);
    });

    // Auto-dismiss after 1.5s
    setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateY(20px)';
        setTimeout(() => toast.remove(), 300);
    }, 1500);
}

        function showLoading(show) {
            const button = document.getElementById('placeOrderButton');
            if (show) {
                button.disabled = true;
                button.textContent = 'Place Order...'
                button.classList.add('loading');
            } else {
                button.disabled = false;
                button.textContent = 'Place Order';
                button.classList.remove('loading');
            }
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            updateOrderSummary();
            updatePaymentOptionStyles();
            
            // Add event listeners for payment method changes
            document.querySelectorAll('input[name="paymentMethod"]').forEach(input => {
                input.addEventListener('change', updatePaymentOptionStyles);
            });
            
            // Add click handlers for payment option containers
            document.querySelectorAll('.payment-option').forEach(option => {
                option.addEventListener('click', function() {
                    if (!this.classList.contains('disabled')) {
                        const input = this.querySelector('input');
                        if (input && !input.disabled) {
                            input.checked = true;
                            updatePaymentOptionStyles();
                        }
                    }
                });
            });
            
            // Apply coupon button handler
            document.getElementById('applyCouponBtn').addEventListener('click', () => applyCoupon());
            
            // Individual coupon apply buttons
            document.querySelectorAll('.applyCouponBtn').forEach(button => {
                button.addEventListener('click', function() {
                    const code = this.getAttribute('data-code');
                    applyCoupon(code);
                });
            });
            
            // Place order button handler
            document.getElementById('placeOrderButton').addEventListener('click', placeOrderHandler);
            
            // Enter key support for coupon input
            document.getElementById('couponInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    applyCoupon();
                }
            });
        });
    </script>
    
    <%-include("../../views/partials/user/footer")%>
</body>

</html>