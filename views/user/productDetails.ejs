<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Details - <%= product.name || product.productName %> - Your Store</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #000000;
            --secondary-color: #ff006e;
            --accent-color: #ffbe0b;
            --text-color: #333333;
            --light-bg: #f8f9fa;
            --border-color: #dee2e6;
            --card-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            --hover-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        body {
            background-color: var(--light-bg);
            color: var(--text-color);
            font-family: 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
        }

        .product-img-container {
            position: relative;
            overflow: hidden;
            width: 100%;
            max-width: 500px;
            height: 250px;
            aspect-ratio: 1;
            background-color: #f5f5f5;
            border-radius: 10px;
            cursor: zoom-in;
        }

        .product-img {
            width: 100%;
            height: 100%;
            object-fit: contain;
            transition: transform 0.2s ease;
            transform-origin: center center;
        }

        .product-img.zoomed {
            transition: transform 0.2s ease;
        }

        .thumbnail-img {
            width: 80px;
            height: 80px;
            object-fit: contain;
            border: 2px solid transparent;
            border-radius: 5px;
            cursor: pointer;
            transition: border-color 0.3s ease;
        }

        .thumbnail-img.active {
            border-color: var(--primary-color);
        }

        .thumbnail-img:hover {
            border-color: #ccc;
        }

        .btn-add-cart {
            background-color: var(--primary-color);
            color: white !important;
            border: none;
            border-radius: 5px;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            transition: background-color 0.3s ease, color 0.3s ease, transform 0.3s ease;
            position: relative;
        }

        .btn-add-cart:hover:not(.loading) {
            background-color: #444444;
            transform: translateY(-2px);
        }

        .btn-add-cart:disabled, .btn-add-cart.loading {
            background-color: #6c757d;
            cursor: not-allowed;
            transform: none !important;
        }

        .btn-add-cart.loading::after {
            content: '';
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #fff;
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
            margin-left: 8px;
        }

        .wishlist-btn {
            background-color: white;
            border: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            color: #999;
            transition: background-color 0.3s ease, color 0.3s ease, transform 0.3s ease;
        }

        .wishlist-btn:hover:not(.loading) {
            color: var(--secondary-color);
            transform: scale(1.1);
        }

        .wishlist-btn.active {
            color: var(--secondary-color);
        }

        .wishlist-btn.loading {
            transform: none !important;
        }

        .wishlist-btn.loading::after {
            content: '';
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid var(--secondary-color);
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .color-swatch {
            display: inline-block;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 1px solid #dee2e6;
            vertical-align: middle;
        }

        .recommendation-img {
            width: 100%;
            height: 180px;
            object-fit: contain;
            background-color: #f5f5f5;
        }

        .scroll-btn {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 10;
        }

        .scroll-btn:hover {
            background-color: rgba(0, 0, 0, 0.7);
        }

        .scroll-btn.left {
            left: 10px;
        }

        .scroll-btn.right {
            right: 10px;
        }

        .recommendations-section:hover .scroll-btn {
            opacity: 1;
        }

        .scroll-btn:disabled {
            background-color: rgba(0, 0, 0, 0.3);
            cursor: not-allowed;
        }

        @media (max-width: 767.98px) {
            .product-img-container {
                max-width: 100%;
            }

            .recommendation-img {
                height: 160px;
            }

            .scroll-btn {
                width: 32px;
                height: 32px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <%- include("../../views/partials/user/header") %>

    <!-- Product Header -->
    <div class="bg-white border-b border-gray-200 py-6 mb-8">
        <div class="container mx-auto px-4">
            <nav aria-label="breadcrumb">
                <ol class="flex space-x-2 text-sm">
                    <li><a href="/" class="text-blue-600 hover:underline">Home</a></li>
                    <li class="flex items-center"><span class="mx-2">></span><a href="/shop" class="text-blue-600 hover:underline">Shop</a></li>
                    <li class="flex items-center"><span class="mx-2">></span><span class="text-gray-500"><%= product.name || product.productName %></span></li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="container mx-auto px-4 mb-20">
        <% if (!product || product.isBlocked) { %>
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                <i class="fas fa-exclamation-circle mr-2"></i>
                This product is unavailable or has been removed.
                <a href="/shop" class="text-red-700 underline hover:text-red-800">Return to Shop</a>
            </div>
        <% } else { %>
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Product Images -->
                <div>
                    <div class="image-zoom-container mb-4">
                        <div class="product-img-container" id="imageContainer" role="region" aria-label="Product image with zoom">
                            <img src="<%= product.productImage?.[0] || product.images?.[0] || '/images/default-product.jpg' %>" class="product-img" alt="<%= product.name || product.productName %>" id="mainImage">
                        </div>
                    </div>
                    <div class="flex items-center text-gray-500 text-sm mb-4">
                        <i class="fas fa-search-plus mr-2"></i>
                        Hover over image to zoom
                    </div>
                    <div class="flex gap-2 overflow-x-auto" role="tablist">
                        <% (product.productImage || product.images || []).slice(0, 5).forEach((img, index) => { %>
                            <img src="<%= img || '/images/default-product.jpg' %>" class="thumbnail-img <%= index === 0 ? 'active' : '' %>" alt="Thumbnail <%= index + 1 %> of <%= product.name || product.productName %>" data-index="<%= index %>" role="tab" aria-selected="<%= index === 0 ? 'true' : 'false' %>">
                        <% }); %>
                    </div>
                </div>

                <!-- Product Details -->
                <div>
                    <h1 class="text-2xl lg:text-3xl font-semibold mb-2"><%= product.name || product.productName %></h1>
                    
                    <!-- Rating -->
                    <% if (product.averageRating) { %>
                        <div class="flex items-center mb-4">
                            <span class="rating-stars text-yellow-400 text-sm" aria-label="Rating: <%= product.averageRating %> out of 5 stars">
                                <% for(let i = 1; i <= 5; i++) { %>
                                    <% if (i <= Math.floor(product.averageRating)) { %>
                                        <i class="fas fa-star"></i>
                                    <% } else if (i <= Math.floor(product.averageRating) + 0.5) { %>
                                        <i class="fas fa-star-half-alt"></i>
                                    <% } else { %>
                                        <i class="far fa-star"></i>
                                    <% } %>
                                <% } %>
                            </span>
                            <% if (product.ratingCount) { %>
                                <span class="text-gray-500 text-sm ml-2">(<%= product.ratingCount %> reviews)</span>
                            <% } %>
                        </div>
                    <% } %>

                    <!-- Price and Discount -->
                    <div class="flex items-baseline mb-4">
                        <span class="text-2xl lg:text-3xl font-bold text-black">₹<%= (product.price || product.salePrice).toLocaleString('en-IN') %></span>
                        <% if (product.regularPrice && product.regularPrice > (product.price || product.salePrice)) { %>
                            <span class="text-lg text-gray-500 line-through ml-2">₹<%= product.regularPrice.toLocaleString('en-IN') %></span>
                            <% const discount = Math.round((product.regularPrice - (product.price || product.salePrice)) / product.regularPrice * 100); %>
                            <span class="text-sm bg-green-100 text-black px-2 py-1 rounded-full ml-2 font-semibold"><%= discount %>% off</span>
                        <% } %>
                    </div>

                    <!-- Stock Status -->
                    <div class="mb-4 text-sm <%= product.quantity > 10 ? 'text-green-600' : product.quantity > 0 ? 'text-yellow-500' : 'text-red-600' %>">
                        <% if (product.quantity > 10) { %>
                            <i class="fas fa-check-circle mr-2"></i>In Stock
                        <% } else if (product.quantity > 0) { %>
                            <i class="fas fa-exclamation-circle mr-2"></i>Low Stock (<%= product.quantity %> left)
                        <% } else { %>
                            <i class="fas fa-times-circle mr-2"></i>Out of Stock
                        <% } %>
                    </div>

                    <!-- Add to Cart and Wishlist -->
                    <div class="flex gap-3 mb-4">
                        <button class="btn-add-cart add-to-cart flex items-center font-semibold" data-product-id="<%= product._id %>" <%= product.quantity === 0 ? 'disabled' : '' %> aria-label="Add <%= product.name || product.productName %> to cart">
                            <i class="fas fa-shopping-cart mr-2"></i>Add to Cart
                        </button>

                        <button class="wishlist-btn add-to-wishlist" data-product-id="<%= product._id %>">
                                                                            <i class="far fa-heart"></i>
                                                                        </button>
                    </div>

                    <!-- Product Description -->
                    <div class="mb-4">
                        <h5 class="text-lg font-semibold">Description</h5>
                        <p><%= product.description || 'No description available.' %></p>
                    </div>

                    <!-- Specifications -->
                    <% if (product.specifications || product.color || product.shape) { %>
                        <div class="mb-4">
                            <h5 class="text-lg font-semibold">Specifications</h5>
                            <table class="w-full border-collapse">
                                <% if (product.color) { %>
                                    <tr>
                                        <th class="w-1/3 font-semibold bg-gray-100 p-3 border-b border-gray-200">Color</th>
                                        <td class="p-3 border-b border-gray-200"><span class="color-swatch" style="background-color: <%= product.color %>;"></span></td>
                                    </tr>
                                <% } %>
                                <% if (product.shape) { %>
                                    <tr>
                                        <th class="w-1/3 font-semibold bg-gray-100 p-3 border-b border-gray-200">Shape</th>
                                        <td class="p-3 border-b border-gray-200"><%= product.shape || 'Sleek Silhouette' %></td>
                                    </tr>
                                <% } %>
                                <% if (product.specifications) { %>
                                    <% for (let [key, value] of Object.entries(product.specifications)) { %>
                                        <tr>
                                            <th class="w-1/3 font-semibold bg-gray-100 p-3 border-b border-gray-200"><%= key %></th>
                                            <td class="p-3 border-b border-gray-200"><%= value %></td>
                                        </tr>
                                    <% } %>
                                <% } %>
                            </table>
                        </div>
                    <% } %>
                </div>

                <!-- Reviews -->
                <div class="col-span-1 lg:col-span-2 bg-white p-6 rounded-lg shadow-sm mb-8">
                    <h4 class="text-xl font-semibold mb-4">Customer Reviews</h4>
                    <% if (product.reviews && product.reviews.length > 0) { %>
                        <% product.reviews.forEach(review => { %>
                            <div class="border-b border-gray-200 pb-4 mb-4 last:border-b-0 last:pb-0 last:mb-0">
                                <div class="flex justify-between">
                                    <div>
                                        <strong><%= review.userName || 'Anonymous' %></strong>
                                        <div class="rating-stars text-yellow-400 text-sm" aria-label="Review rating: <%= review.rating %> out of 5 stars">
                                            <% for(let i = 1; i <= 5; i++) { %>
                                                <% if (i <= review.rating) { %>
                                                    <i class="fas fa-star"></i>
                                                <% } else { %>
                                                    <i class="far fa-star"></i>
                                                <% } %>
                                            <% } %>
                                        </div>
                                    </div>
                                    <small class="text-gray-500"><%= new Date(review.date).toLocaleDateString() %></small>
                                </div>
                                <p><%= review.comment %></p>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <p>No reviews yet. Be the first to review this product!</p>
                    <% } %>
                </div>
            </div>

            <!-- Recommendations -->
            <% if (recommendations && recommendations.length > 0) { %>
                <div class="relative mt-8">
                    <h4 class="text-xl font-semibold mb-4">YOU MAY ALSO LIKE</h4>
                    <button class="scroll-btn left" id="scrollLeft" aria-label="Scroll left">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <button class="scroll-btn right" id="scrollRight" aria-label="Scroll right">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                    <div class="flex gap-4 overflow-x-auto pb-4 snap-x snap-mandatory" id="recommendationsContainer" style="scrollbar-width: none; -ms-overflow-style: none;">
                        <% recommendations.slice(0, 6).forEach(rec => { %>
                            <div class="flex-none w-80 lg:w-96 bg-white rounded-lg overflow-hidden shadow-sm hover:shadow-lg hover:-translate-y-1 transition-all snap-start h-80">
                                <a href="/productDetails?id=<%= rec._id%>" aria-label="View <%= rec.name || rec.productName %>">
                                    <img src="<%= rec.productImage?.[0] || rec.images?.[0] || '/images/default-product.jpg' %>" class="recommendation-img" alt="<%= rec.name || rec.productName %>">
                                </a>
                                <div class="p-3">
                                    <a href="/productDetails?id=<%= rec._id%>" aria-label="View <%= rec.name || rec.productName %>">
                                        <h6 class="text-lg font-semibold mb-1 truncate"><%= rec.name || rec.productName %></h6>
                                        <div class="flex items-baseline">
                                            <span class="text-lg font-bold">₹<%= (rec.price || rec.salePrice).toLocaleString('en-IN') %></span>
                                            <% if (rec.regularPrice && rec.regularPrice > (rec.price || rec.salePrice)) { %>
                                                <span class="text-sm text-gray-500 line-through ml-2">₹<%= rec.regularPrice.toLocaleString('en-IN') %></span>
                                                <% const discount = Math.round((rec.regularPrice - (rec.price || rec.salePrice)) / rec.regularPrice * 100); %>
                                                <span class="text-sm bg-green-100 text-black px-2 py-1 rounded-full ml-2 font-semibold"><%= discount %>% off</span>
                                            <% } %>
                                        </div>
                                    </a>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>
            <% } %>
        <% } %>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            initializeWishlistButtons()
          initializeCartButtons()
        
            // Initialize zoom functionality
            initImageZoom();

            // Image thumbnail switching
            const mainImage = document.getElementById('mainImage');
            const thumbnails = document.querySelectorAll('.thumbnail-img');

            thumbnails.forEach(thumb => {
                thumb.addEventListener('click', function() {
                    thumbnails.forEach(t => {
                        t.classList.remove('active');
                        t.setAttribute('aria-selected', 'false');
                    });
                    this.classList.add('active');
                    this.setAttribute('aria-selected', 'true');
                    mainImage.src = this.src;
                });

                // Keyboard support for thumbnails
                thumb.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        this.click();
                    }
                });
            });

            // Debounce utility
            function debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }

            // Add to cart
             const addToCartButtons = document.querySelectorAll('.add-to-cart');
            addToCartButtons.forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    const productId = this.getAttribute('data-product-id');
                    addToCart(productId, this);  // Pass button to function
                });
            });


            // Add to wishlist functionality
        const wishlistButtons = document.querySelectorAll('.add-to-wishlist');
        wishlistButtons.forEach(button => {
            button.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                
                // Prevent double clicks
                if (this.disabled) return;
                
                const productId = this.getAttribute('data-product-id');
                toggleWishlist(productId, this);
            });
        });

            // Recommendations scroll buttons
            const scrollLeftBtn = document.getElementById('scrollLeft');
            const scrollRightBtn = document.getElementById('scrollRight');
            const recommendationsContainer = document.getElementById('recommendationsContainer');

            if (scrollLeftBtn && scrollRightBtn && recommendationsContainer) {
                // Function to update button states
                function updateScrollButtons() {
                    const scrollLeft = recommendationsContainer.scrollLeft;
                    const maxScroll = recommendationsContainer.scrollWidth - recommendationsContainer.clientWidth;

                    scrollLeftBtn.disabled = scrollLeft <= 0;
                    scrollRightBtn.disabled = scrollLeft >= maxScroll - 1;
                }

                // Initial button state
                updateScrollButtons();

                // Update button states on scroll
                recommendationsContainer.addEventListener('scroll', updateScrollButtons);

                // Scroll left
                scrollLeftBtn.addEventListener('click', function() {
                    recommendationsContainer.scrollBy({
                        left: -360,
                        behavior: 'smooth'
                    });
                });

                // Scroll right
                scrollRightBtn.addEventListener('click', function() {
                    recommendationsContainer.scrollBy({
                        left: 360,
                        behavior: 'smooth'
                    });
                });

                // Adjust scroll amount for mobile
                if (window.innerWidth <= 767.98) {
                    scrollLeftBtn.addEventListener('click', function() {
                        recommendationsContainer.scrollBy({
                            left: -240,
                            behavior: 'smooth'
                        });
                    });
                    scrollRightBtn.addEventListener('click', function() {
                        recommendationsContainer.scrollBy({
                            left: 240,
                            behavior: 'smooth'
                        });
                    });
                }
            }

            // Image Zoom Functionality
            function initImageZoom() {
                const imageContainer = document.getElementById('imageContainer');
                const mainImage = document.getElementById('mainImage');

                let isZooming = false;
                const zoomFactor = 2;

                imageContainer.addEventListener('mouseenter', function() {
                    isZooming = true;
                    mainImage.classList.add('zoomed');
                });

                imageContainer.addEventListener('mouseleave', function() {
                    isZooming = false;
                    mainImage.classList.remove('zoomed');
                    mainImage.style.transform = 'scale(1)';
                    mainImage.style.transformOrigin = 'center center';
                });

                imageContainer.addEventListener('mousemove', function(e) {
                    if (!isZooming) return;

                    const rect = imageContainer.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const y = e.clientY - rect.top;

                    const originX = (x / rect.width) * 100;
                    const originY = (y / rect.height) * 100;

                    mainImage.style.transform = `scale(${zoomFactor})`;
                    mainImage.style.transformOrigin = `${originX}% ${originY}%`;
                });

                imageContainer.addEventListener('touchstart', function(e) {
                    isZooming = false;
                    mainImage.classList.remove('zoomed');
                    mainImage.style.transform = 'scale(1)';
                    mainImage.style.transformOrigin = 'center center';
                });
            }

           
 function initializeCartButtons() {
                const cartButtons = document.querySelectorAll('.add-to-cart');
                const productIds = Array.from(cartButtons).map(btn => btn.getAttribute('data-product-id')).filter(Boolean);

                if (productIds.length === 0) return;

                fetch('/cart/status', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productIds })
                })
                    .then(res => res.json())
                    .then(data => {
                        if (data.success) {
                            cartButtons.forEach(button => {
                                const productId = button.getAttribute('data-product-id');
                                if (data.cartStatus[productId]) {
                                    // Product already in cart
                                    button.innerHTML = '<i class="fas fa-shopping-cart"></i> Go to Cart';
                                    button.classList.add('bg-black');

                                    const newButton = button.cloneNode(true);
                                    button.parentNode.replaceChild(newButton, button);

                                    newButton.addEventListener('click', () => {
                                        window.location.href = '/cart';
                                    });
                                }
                            });
                        }
                    })
                    .catch(err => console.error('Cart status error:', err));
            }
            // initialize wishlist button states
        function initializeWishlistButtons() {
            const wishlistButtons = document.querySelectorAll('.add-to-wishlist');
            const productIds = Array.from(wishlistButtons).map(btn => btn.getAttribute('data-product-id')).filter(Boolean);
            
            if (productIds.length === 0) return;

            // Fetch wishlist status for all products
            fetch('/wishlist/status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productIds: productIds })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    wishlistButtons.forEach(button => {
                        const productId = button.getAttribute('data-product-id');
                        if (data.wishlistStatus[productId]) {
                            button.innerHTML = '<i class="fas fa-heart"></i>';
                            button.classList.add('active');
                        } else {
                            button.innerHTML = '<i class="far fa-heart"></i>';
                            button.classList.remove('active');
                        }
                    });
                }
            })
            .catch(error => {
                console.error('Error fetching wishlist status:', error);
                // Set all buttons to unfilled state on error
                wishlistButtons.forEach(button => {
                    button.innerHTML = '<i class="far fa-heart"></i>';
                    button.classList.remove('active');
                });
            });
        }
 function addToCart(productId, button) {
                if (!productId) {
                    showToast('Invalid product ID', 'error');
                    return;
                }

                fetch('/cart/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId, quantity: 1 })
                })
                    .then(response => {
                        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            showToast('Product added to cart!', 'success');

                            // Update cart counter
                            updateCartCounter(data.cartCount);

                            // Change button to "Go to Cart"
                            if (button) {
                                button.innerHTML = '<i class="fas fa-shopping-cart"></i> Go to Cart';
                                button.classList.add('bg-black');

                                // Remove old listener
                                const newButton = button.cloneNode(true);
                                button.parentNode.replaceChild(newButton, button);

                                // Redirect to cart
                                newButton.addEventListener('click', () => {
                                    window.location.href = '/cart';
                                });
                            }

                        } else {
                            showToast(data.message || 'Failed to add product to cart', 'error');
                            if (data.message?.includes('login')) {
                                setTimeout(() => window.location.href = '/login', 2000);
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Add to cart error:', error);
                        showToast('Please login & try again', 'error');
                        setTimeout(() => window.location.href = '/login', 2000);
                    });
            }

           // Function to toggle wishlist with improved state management
        function toggleWishlist(productId, button) {
    if (!productId) {
        showToast('Invalid product ID', 'error');
        return;
    }

    button.disabled = true;
    const originalHTML = button.innerHTML;
    const wasActive = button.classList.contains('active');

    // Optimistic UI update
    if (wasActive) {
        button.innerHTML = '<i class="far fa-heart"></i>';
        button.classList.remove('active');
    } else {
        button.innerHTML = '<i class="fas fa-heart"></i>';
        button.classList.add('active');
    }

    const url = wasActive ? `/wishlist/remove/${productId}` : '/addtowishlist';
    const method = wasActive ? 'DELETE' : 'POST';

    const fetchOptions = {
        method: method,
        headers: {
            'Content-Type': 'application/json',
        },
        ...(method === 'POST' && { body: JSON.stringify({ productId }) }) // Add body only for POST
    };

    fetch(url, fetchOptions)
        .then(response => {
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return response.json();
        })
        .then(data => {
            if (data.success) {
                if (wasActive) {
                    showToast('Product removed from wishlist!', 'info');
                } else {
                    showToast('Product added to wishlist!', 'success');
                }
                updateWishlistCounter(data.wishlistCount);
            } else {
                // Revert UI on failure
                button.innerHTML = originalHTML;
                if (wasActive) button.classList.add('active');
                else button.classList.remove('active');

                if (data.message?.includes('login')) {
                    showToast('Please login to manage wishlist', 'error');
                    setTimeout(() => window.location.href = '/login', 2000);
                } else if (data.message?.includes('blocked')) {
                    showToast('Your account is blocked', 'error');
                    setTimeout(() => window.location.href = '/login', 2000);
                } else {
                    showToast(data.message || 'Wishlist update failed', 'error');
                }
            }
        })
        .catch(error => {
            console.error('Error:', error);
            // Revert UI on exception
            button.innerHTML = originalHTML;
            if (wasActive) button.classList.add('active');
            else button.classList.remove('active');

            showToast('An error occurred. Please try again.', 'error');
        })
        .finally(() => {
            button.disabled = false;
        });
}

            // Show toast notification
            function showToast(message, type = 'info') {
                let toastContainer = document.querySelector('.toast-container');
                if (!toastContainer) {
                    toastContainer = document.createElement('div');
                    toastContainer.className = 'fixed bottom-4 right-4 p-3';
                    toastContainer.style.zIndex = '9999';
                    document.body.appendChild(toastContainer);
                }

                const toastId = 'toast-' + Date.now();
                const toast = document.createElement('div');
                let bgClass, borderClass;
                switch(type) {
                    case 'success':
                        bgClass = 'bg-green-500';
                        borderClass = 'border-green-500';
                        break;
                    case 'error':
                        bgClass = 'bg-red-500';
                        borderClass = 'border-red-500';
                        break;
                    case 'info':
                        bgClass = 'bg-blue-500';
                        borderClass = 'border-blue-500';
                        break;
                    default:
                        bgClass = 'bg-blue-500';
                        borderClass = 'border-blue-500';
                }

                toast.className = `flex items-center text-white ${bgClass} border-l-4 ${borderClass} rounded shadow-lg p-3 mb-2 max-w-xs w-full opacity-0 transition-all duration-300 transform translate-x-full`;
                toast.id = toastId;
                toast.setAttribute('role', 'alert');
                toast.setAttribute('aria-live', 'assertive');
                toast.setAttribute('aria-atomic', 'true');

                toast.innerHTML = `
                    <div class="flex-1 text-sm">${message}</div>
                    <button type="button" class="ml-2 text-white hover:text-gray-200 focus:outline-none" data-toast-id="${toastId}">
                        <i class="fas fa-times"></i>
                    </button>
                `;

                toastContainer.appendChild(toast);

                setTimeout(() => {
                    toast.classList.remove('opacity-0', 'translate-x-full');
                    toast.classList.add('opacity-100', 'translate-x-0');
                }, 100);

                const closeButton = toast.querySelector(`[data-toast-id="${toastId}"]`);
                closeButton.addEventListener('click', () => {
                    toast.classList.remove('opacity-100', 'translate-x-0');
                    toast.classList.add('opacity-0', 'translate-x-full');
                    setTimeout(() => toast.remove(), 300);
                });

                setTimeout(() => {
                    toast.classList.remove('opacity-100', 'translate-x-0');
                    toast.classList.add('opacity-0', 'translate-x-full');
                    setTimeout(() => toast.remove(), 300);
                }, 3000);
            }

            // Update cart counter
            function updateCartCounter(count) {
                const cartCounter = document.querySelector('.cart-counter');
                if (cartCounter) {
                    cartCounter.textContent = count;
                    cartCounter.classList.toggle('hidden', count <= 0);
                }
            }

            // Update wishlist counter
            function updateWishlistCounter(count) {
                const wishlistCounter = document.querySelector('.wishlist-counter');
                if (wishlistCounter) {
                    wishlistCounter.textContent = count;
                    wishlistCounter.classList.toggle('hidden', count <= 0);
                }
            }
        });
    </script>
    <%- include("../../views/partials/user/footer") %>
</body>
</html>