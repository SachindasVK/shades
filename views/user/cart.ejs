<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart - Your Store</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        :root {
            --primary-color: #000000;
            --text-color: #333333;
            --light-bg: #f8f9fa;
            --border-color: #dee2e6;
            --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            --purple-color: #000000;
        }

        body {
            background-color: var(--light-bg);
            color: var(--text-color);
            font-family: 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
        }

        .cart-header {
            background-color: white;
            border-bottom: 1px solid var(--border-color);
            padding: 1.5rem 0;
            margin-bottom: 2rem;
        }

        .breadcrumb-item+.breadcrumb-item::before {
            content: ">";
        }

        .cart-section, .order-summary {
            background-color: white;
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: var(--card-shadow);
        }

        .cart-section h3, .order-summary h4 {
            font-size: 1.25rem;
            font-weight: 700;
            margin-bottom: 1rem;
        }

        .cart-item {
            display: flex;
            align-items: center;
            padding: 1rem 0;
            border-bottom: 1px solid var(--border-color);
        }

        .cart-item:last-child {
            border-bottom: none;
        }

        .cart-item img {
            width: 200px;
            height: 100px;
            object-fit: contain;
            background-color: #f5f5f5;
            border-radius: 8px;
            margin-right: 1rem;
            cursor: pointer;
            transition: transform 0.2s ease;
        }

        .cart-item img:hover {
            transform: scale(1.05);
        }

        .item-details {
            flex: 1;
        }

        .item-details h5 {
            font-size: 1rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: var(--text-color);
        }

        .item-details p {
            font-size: 0.85rem;
            color: #6c757d;
            margin-bottom: 0.3rem;
        }

        .quantity-control {
            display: flex;
            align-items: center;
            gap: 0;
            margin-bottom: 0.5rem;
        }

        .quantity-control button {
            width: 32px;
            height: 32px;
            border: 1px solid var(--border-color);
            background-color: #fff;
            color: var(--text-color);
            font-size: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 4px;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .quantity-control button:hover:not(:disabled) {
            background-color: #f1f3f5;
            border-color: var(--primary-color);
        }

        .quantity-control button:disabled {
            background-color: #e9ecef;
            cursor: not-allowed;
            opacity: 0.5;
        }

        .quantity-control input {
            width: 50px;
            text-align: center;
            border: 1px solid var(--border-color);
            border-left: none;
            border-right: none;
            height: 32px;
            font-size: 0.9rem;
            background-color: #fff;
        }

        .item-price {
            font-size: 1rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-left: 1rem;
            min-width: 120px;
            text-align: right;
        }

        .item-actions {
            display: flex;
            gap: 1rem;
            font-size: 0.8rem;
            margin-top: 0.5rem;
        }

        .item-actions a {
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.3rem;
            transition: color 0.3s ease;
            cursor: pointer;
        }

        .item-actions .favorite {
            color: #0d45ff;
        }

        .item-actions .favorite:hover {
            color: #0056b3;
        }

        .item-actions .remove {
            color: #dc3545;
        }

        .item-actions .remove:hover {
            color: #b02a37;
        }

        .back-to-shop {
            margin-top: 1rem;
            color: #007bff;
            font-size: 0.9rem;
            text-decoration: none;
            transition: color 0.3s ease;
        }

        .back-to-shop:hover {
            color: #0056b3;
        }

        .order-summary {
            position: sticky;
            top: 20px;
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.75rem;
            font-size: 0.9rem;
        }

        .summary-item.discount {
            color: #28a745;
        }

        .summary-item.free {
            color: #28a745;
        }

        .summary-item.total {
            font-size: 1.1rem;
            font-weight: 700;
            margin-top: 1rem;
            padding-top: 0.75rem;
            border-top: 2px solid var(--border-color);
        }

        .checkout-btn {
            width: 100%;
            background-color: var(--purple-color);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.75rem;
            font-weight: 600;
            font-size: 1rem;
            transition: background-color 0.3s ease;
            margin-top: 1rem;
        }

        .checkout-btn:hover:not(:disabled) {
            background-color: #1d1d1d;
        }

        .checkout-btn:disabled {
            background-color: #6c757d;
            cursor: not-allowed;
        }

        .empty-cart {
            text-align: center;
            padding: 3rem 1rem;
            color: #6c757d;
        }

        .empty-cart i {
            font-size: 4rem;
            margin-bottom: 1rem;
            color: #dee2e6;
        }

        .error-message {
            color: #dc3545;
            font-size: 0.8rem;
            margin-top: 0.5rem;
            display: none;
        }

        .loading {
            pointer-events: none;
            opacity: 0.6;
        }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal-content {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
            max-height: 85vh;
            overflow-y: auto;
        }

        .modal-header {
            padding-bottom: 1rem;
            border-bottom: 1px solid #e5e7eb;
            margin-bottom: 1.5rem;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #1f2937;
        }

        .modal-message {
            font-size: 1rem;
            color: #374151;
            margin-bottom: 1rem;
        }

        .button-group {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 1.5rem;
        }

        @media (max-width: 991.98px) {
            .cart-item img {
                width: 60px;
                height: 60px;
            }

            .item-details h5 {
                font-size: 0.9rem;
            }

            .item-price {
                font-size: 0.9rem;
                min-width: 100px;
            }

            .quantity-control input {
                width: 40px;
            }
        }

        @media (max-width: 767.98px) {
            .cart-section, .order-summary {
                padding: 1rem;
            }

            .cart-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }

            .cart-item img {
                margin-bottom: 0.5rem;
                align-self: center;
            }

            .item-price {
                margin-left: 0;
                align-self: center;
                font-size: 1.1rem;
            }

            .order-summary {
                position: static;
            }
        }
    </style>
</head>
<body>
    <%-include("../../views/partials/user/header")%>
    
      <div class="bg-white border-b border-gray-200 py-6 mb-8">
        <div class="container mx-auto px-4">
            <nav aria-label="breadcrumb">
                <ol class="flex space-x-2 text-sm">
                    <li><a href="/" class="text-blue-600 hover:underline">Home</a></li>
                     <li  class="flex items-center"><span class="mx-2">></span><a href="/shop" class="text-blue-600 hover:underline">Shop</a></li>
                    <li class="flex items-center"><span class="mx-2">></span><span class="text-gray-500">Cart</span></li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="container max-w-7xl mx-auto px-4 mb-20">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-4">
            <!-- Shopping Cart Section -->
            <div class="col-span-2">
                <div class="cart-section">
                    <h3 class="text-xl font-bold">Shopping Cart</h3>
                    <div id="cart-items">
                        <% if (cartItems && cartItems.length > 0) { %>
                            <% cartItems.forEach((item, index) => { %>
                                <div class="cart-item" data-product-id="<%= item.product._id %>" data-index="<%= index %>">
                                    <a vibranium-id="product-image-link" href="/productDetails?id=<%= item.product._id %>">
                                        <img src="<%= item.product.productImage && item.product.productImage[0] || 'https://via.placeholder.com/80?text=Product' %>"
                                             alt="<%= item.product.productName %>"
                                             onerror="this.src='https://via.placeholder.com/80?text=Product'">
                                    </a>
                                    <div class="item-details">
                                        <h5><%= item.product.productName %></h5>
                                        <% if (item.product.brand) { %>
                                            <p>Brand: <%= item.product.brand.name || item.product.brand %></p>
                                        <% } %>
                                        <div class="quantity-control">
                                            <button type="button" 
                                                    onclick="updateQuantity('<%= item.product._id %>', <%= item.quantity - 1 %>)" 
                                                    <%= item.quantity <= 1 ? 'disabled' : '' %> 
                                                    aria-label="Decrease quantity">-</button>
                                            <input type="text" value="<%= item.quantity %>" readonly aria-label="Quantity">
                                            <button type="button" 
                                                    onclick="updateQuantity('<%= item.product._id %>', <%= item.quantity + 1 %>)" 
                                                    <%= item.quantity >= item.product.quantity ? 'disabled' : '' %> 
                                                    aria-label="Increase quantity">+</button>
                                        </div>
                                        <div class="item-actions">
                                            <a href="#" class="favorite" onclick="moveToWishlist('<%= item.product._id %>', event)" aria-label="Move to wishlist">
                                                <i class="far fa-heart"></i> MOVE TO FAVORITES
                                            </a>
                                            <a href="#" class="remove" onclick="openRemoveCartModal('<%= item.product._id %>')" aria-label="Remove from cart">
                                                <i class="fas fa-times"></i> REMOVE
                                            </a>
                                        </div>
                                    </div>
                                    <div class="item-price" data-price="<%= item.product.salePrice || item.product.regularPrice || 0 %>">
                                        ₹<%= (item.totalPrice || item.product.salePrice || 0).toLocaleString('en-IN') %>
                                    </div>
                                </div>
                            <% }) %>
                        <% } else { %>
                            <div class="empty-cart">
                                <i class="fas fa-shopping-cart"></i>
                                <h4>Your cart is empty</h4>
                                <p>Add some products to get started!</p>
                            </div>
                        <% } %>
                    </div>
                    <a href="/shop" class="back-to-shop"><i class="fas fa-arrow-left"></i> BACK TO SHOP</a>
                </div>
            </div>

            <!-- Order Summary Section -->
            <div class="col-span-1">
                <div class="order-summary">
                    <h4>Order Summary</h4>
                    <div id="order-summary-items">
                        <% if (cartItems && cartItems.length > 0) { %>
                            <% 
                                let subtotal = 0;
                                cartItems.forEach(item => {
                                    subtotal += (item.product.salePrice || item.product.regularPrice || 0) * item.quantity;
                                });
                                const discount = subtotal > 1500 ? 200 : 0;
                                const deliveryCharge = subtotal > 1000 ? 0 : 50;
                                const gst = Math.round(subtotal * 0.18);
                                const total = subtotal + deliveryCharge + gst;
                            %>
                            <div class="summary-item">
                                <span>Subtotal (<%= cartItems.length %> items)</span>
                                <span>₹<%= subtotal.toLocaleString('en-IN') %></span>
                            </div>
                            <div class="summary-item">
                                <span>Discount</span>
                                <span class="text-green-600">- ₹<%= discount.toLocaleString('en-IN') %></span>
                            </div>
                            <div class="summary-item">
                                <span>Delivery Charge</span>
                                <span class="<%= deliveryCharge === 0 ? 'free' : '' %>">
                                    ₹<%= deliveryCharge.toLocaleString('en-IN') %>
                                    <% if (deliveryCharge === 0) { %> FREE DELIVERY<% } %>
                                </span>
                            </div>
                            <div class="summary-item">
                                <span>GST (18%)</span>
                                <span>₹<%= gst.toLocaleString('en-IN') %></span>
                            </div>
                            <div class="summary-item total">
                                <span>TOTAL</span>
                                <span>₹<%= total.toLocaleString('en-IN') %></span>
                            </div>
                        <% } else { %>
                            <div class="summary-item">
                                <span>Subtotal (0 items)</span>
                                <span>₹0</span>
                            </div>
                            <div class="summary-item total">
                                <span>TOTAL</span>
                                <span>₹0</span>
                            </div>
                        <% } %>
                    </div>
                    <button id="checkout-btn" class="checkout-btn" <%= (!cartItems || cartItems.length === 0) ? 'disabled' : '' %>>
                        Proceed to Checkout
                    </button>
                    <div id="cart-error" class="error-message"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Remove Cart Item Confirmation Modal -->
    <div id="removeCartModal" class="modal-overlay hidden">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Confirm Removal</h3>
            </div>
            <div class="modal-message">
                Are you sure you want to remove this item from your cart?
            </div>
            <div class="button-group">
                <button type="button" class="btn bg-gray-100 text-gray-700 border border-gray-300 hover:bg-gray-200 py-3 px-6 rounded-md text-sm font-medium transition" onclick="closeRemoveCartModal()">Cancel</button>
                <button type="button" class="btn bg-red-500 text-white hover:bg-red-600 py-3 px-6 rounded-md text-sm font-medium transition" onclick="confirmRemoveCartItem()">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div id="toastContainer" class="fixed bottom-5 right-5 z-[2000]"></div>

    <script>
        const MAX_QUANTITY_PER_PRODUCT = 10;
        let productIdToRemove = null;

        // Show confirmation modal for removing item
        function openRemoveCartModal(productId) {
            productIdToRemove = productId;
            document.getElementById('removeCartModal').classList.remove('hidden');
        }

        // Close confirmation modal
        function closeRemoveCartModal() {
            document.getElementById('removeCartModal').classList.add('hidden');
            productIdToRemove = null;
        }

        // Handle confirm button click in modal
        async function confirmRemoveCartItem() {
            if (!productIdToRemove) return;

            try {
                showLoading(true);
                const response = await fetch('/cart/remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        productId: productIdToRemove
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    showToast('Product removed from cart!', 'success');
                    // Remove the cart item from the UI
                    const removedItem = document.querySelector(`.cart-item[data-product-id="${productIdToRemove}"]`);
                    if (removedItem) {
                        removedItem.remove();
                    }

                    // Update cart items count
                    const cartItems = document.querySelectorAll('.cart-item');
                    const itemCount = cartItems.length;

                    // Check if cart is empty
                    if (itemCount === 0) {
                        document.getElementById('cart-items').innerHTML = `
                            <div class="empty-cart">
                                <i class="fas fa-shopping-cart"></i>
                                <h4>Your cart is empty</h4>
                                <p>Add some products to get started!</p>
                            </div>`;
                        // Disable checkout button
                        document.getElementById('checkout-btn').setAttribute('disabled', 'true');
                        // Update order summary for empty cart
                        document.getElementById('order-summary-items').innerHTML = `
                            <div class="summary-item">
                                <span>Subtotal (0 items)</span>
                                <span>₹0</span>
                            </div>
                            <div class="summary-item total">
                                <span>TOTAL</span>
                                <span>₹0</span>
                            </div>`;
                    } else {
                        // Calculate new subtotal
                        let subtotal = 0;
                        cartItems.forEach(item => {
                            const price = parseFloat(item.querySelector('.item-price').getAttribute('data-price'));
                            const quantity = parseInt(item.querySelector('.quantity-control input').value);
                            subtotal += price * quantity;
                        });

                        // Calculate discounts and other charges
                        const discount = subtotal > 1500 ? 200 : 0;
                        const deliveryCharge = subtotal > 1000 ? 0 : 50;
                        const gst = Math.round(subtotal * 0.18);
                        const total = subtotal + deliveryCharge + gst;

                        // Update order summary
                        document.getElementById('order-summary-items').innerHTML = `
                            <div class="summary-item">
                                <span>Subtotal (${itemCount} items)</span>
                                <span>₹${subtotal.toLocaleString('en-IN')}</span>
                            </div>
                            <div class="summary-item">
                                <span>Discount</span>
                                <span class="text-green-600">- ₹${discount.toLocaleString('en-IN')}</span>
                            </div>
                            <div class="summary-item">
                                <span>Delivery Charge</span>
                                <span class="${deliveryCharge === 0 ? 'free' : ''}">
                                    ₹${deliveryCharge.toLocaleString('en-IN')}
                                    ${deliveryCharge === 0 ? ' FREE DELIVERY' : ''}
                                </span>
                            </div>
                            <div class="summary-item">
                                <span>GST (18%)</span>
                                <span>₹${gst.toLocaleString('en-IN')}</span>
                            </div>
                            <div class="summary-item total">
                                <span>TOTAL</span>
                                <span>₹${total.toLocaleString('en-IN')}</span>
                            </div>`;
                    }
                } else {
                    showToast(result.message || 'Failed to remove item', 'error');
                }
            } catch (error) {
                console.error('Error removing item:', error);
                showToast('Error removing item from cart', 'error');
            } finally {
                showLoading(false);
                closeRemoveCartModal();
            }
        }

        // Move to wishlist function
        async function moveToWishlist(productId, event) {
            event.preventDefault();

            try {
                showLoading(true);
                const wishlistResponse = await fetch('/addtowishlist', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        productId: productId
                    })
                });

                const wishlistResult = await wishlistResponse.json();
                
                if (wishlistResult.success) {
                    const cartResponse = await fetch('/cart/remove', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            productId: productId
                        })
                    });

                    const cartResult = await cartResponse.json();
                    
                    if (cartResult.success) {
                        showToast('Product moved to wishlist!', 'success');
                        // Remove the cart item from the UI
                        const removedItem = document.querySelector(`.cart-item[data-product-id="${productId}"]`);
                        if (removedItem) {
                            removedItem.remove();
                        }

                        // Update cart items count
                        const cartItems = document.querySelectorAll('.cart-item');
                        const itemCount = cartItems.length;

                        // Check if cart is empty
                        if (itemCount === 0) {
                            document.getElementById('cart-items').innerHTML = `
                                <div class="empty-cart">
                                    <i class="fas fa-shopping-cart"></i>
                                    <h4>Your cart is empty</h4>
                                    <p>Add some products to get started!</p>
                                </div>`;
                            // Disable checkout button
                            document.getElementById('checkout-btn').setAttribute('disabled', 'true');
                            // Update order summary for empty cart
                            document.getElementById('order-summary-items').innerHTML = `
                                <div class="summary-item">
                                    <span>Subtotal (0 items)</span>
                                    <span>₹0</span>
                                </div>
                                <div class="summary-item total">
                                    <span>TOTAL</span>
                                    <span>₹0</span>
                                </div>`;
                        } else {
                            // Calculate new subtotal
                            let subtotal = 0;
                            cartItems.forEach(item => {
                                const price = parseFloat(item.querySelector('.item-price').getAttribute('data-price'));
                                const quantity = parseInt(item.querySelector('.quantity-control input').value);
                                subtotal += price * quantity;
                            });

                            // Calculate discounts and other charges
                            const discount = subtotal > 1500 ? 200 : 0;
                            const deliveryCharge = subtotal > 1000 ? 0 : 50;
                            const gst = Math.round(subtotal * 0.18);
                            const total = subtotal + deliveryCharge + gst;

                            // Update order summary
                            document.getElementById('order-summary-items').innerHTML = `
                                <div class="summary-item">
                                    <span>Subtotal (${itemCount} items)</span>
                                    <span>₹${subtotal.toLocaleString('en-IN')}</span>
                                </div>
                                <div class="summary-item">
                                    <span>Discount</span>
                                    <span class="text-green-600">- ₹${discount.toLocaleString('en-IN')}</span>
                                </div>
                                <div class="summary-item">
                                    <span>Delivery Charge</span>
                                    <span class="${deliveryCharge === 0 ? 'free' : ''}">
                                        ₹${deliveryCharge.toLocaleString('en-IN')}
                                        ${deliveryCharge === 0 ? ' FREE DELIVERY' : ''}
                                    </span>
                                </div>
                                <div class="summary-item">
                                    <span>GST (18%)</span>
                                    <span>₹${gst.toLocaleString('en-IN')}</span>
                                </div>
                                <div class="summary-item total">
                                    <span>TOTAL</span>
                                    <span>₹${total.toLocaleString('en-IN')}</span>
                                </div>`;
                        }
                    } else {
                        showToast('Added to wishlist but failed to remove from cart', 'warning');
                    }
                } else {
                    showToast(wishlistResult.message || 'Failed to add to wishlist', 'error');
                }
            } catch (error) {
                console.error('Error moving to wishlist:', error);
                showToast('Error moving item to wishlist', 'error');
            } finally {
                showLoading(false);
            }
        }

        // Update quantity function
        async function updateQuantity(productId, newQuantity) {
            if (newQuantity < 1) return;
            if (newQuantity > MAX_QUANTITY_PER_PRODUCT) {
                showToast(`Maximum quantity allowed is ${MAX_QUANTITY_PER_PRODUCT}`, 'error');
                return;
            }

            try {
                showLoading(true);
                const response = await fetch('/cart/update-quantity', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        productId: productId,
                        quantity: newQuantity
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    window.location.reload();
                } else {
                    showToast(result.message || 'Failed to update quantity', 'error');
                }
            } catch (error) {
                console.error('Error updating quantity:', error);
                showToast('Error updating quantity', 'error');
            } finally {
                showLoading(false);
            }
        }

        // Checkout function
        document.getElementById('checkout-btn')?.addEventListener('click', function() {
            const hasItems = document.querySelectorAll('.cart-item[data-product-id]').length > 0;
            if (hasItems) {
                window.location.href = '/checkout';
            }
        });

        // Utility functions
        function showToast(message, type = 'info') {
            const toastContainer = document.getElementById('toastContainer');
            const toast = document.createElement('div');
            toast.className = `min-w-[250px] text-white p-4 rounded shadow-lg transition-opacity transition-transform duration-300 opacity-0 translate-y-5 ${type === 'error' ? 'bg-red-500' : type === 'warning' ? 'bg-yellow-500' : type === 'success' ? 'bg-green-500' : 'bg-blue-600'}`;
            toast.textContent = message;
            toastContainer.appendChild(toast);

            setTimeout(() => {
                toast.classList.remove('opacity-0', 'translate-y-5');
            }, 100);

            setTimeout(() => {
                toast.classList.add('opacity-0', 'translate-y-5');
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }, 3000);
        }

        function showLoading(show) {
            const elements = document.querySelectorAll('button, .cart-item');
            elements.forEach(el => {
                if (show) {
                    el.classList.add('loading');
                } else {
                    el.classList.remove('loading');
                }
            });
        }

        // Close modal when clicking outside
        document.getElementById('removeCartModal').addEventListener('click', function (e) {
            if (e.target === this) {
                closeRemoveCartModal();
            }
        });

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Cart page loaded successfully');
        });
    </script>
    
    <%-include("../../views/partials/user/footer")%>
</body>
</html>