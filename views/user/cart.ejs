<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SHADES - Shopping cart</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script defer src="/script/script.js"></script>
    <style>
        :root {
            --primary-color: #000000;
            --secondary-color: #ff006e;
            --accent-color: #ffbe0b;
            --text-color: #333333;
            --light-bg: #ffffff;
            --border-color: #dee2e6;
            --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        body {
            font-family: 'Inter', sans-serif;
        }

        .cart-item img {
            width: 200px;
            height: 100px;
            object-fit: contain;
            background-color: #f5f5f5;
            border-radius: 8px;
            margin-right: 0.75rem;
            cursor: pointer;
            transition: transform 0.2s ease;
        }

        .cart-item img:hover {
            transform: scale(1.05);
        }

        .quantity-control button:disabled {
            background-color: #e9ecef;
            cursor: not-allowed;
            opacity: 0.5;
        }

        .action-button {
            color: #000000;
            text-decoration: none;
            font-size: 0.75rem;
            background: none;
            border: none;
            cursor: pointer;
            padding: 0.4rem 0.6rem;
            border-radius: 0.25rem;
            transition: all 0.2s ease;
            touch-action: manipulation;
        }

        .action-button.remove {
            color: #dc3545;
        }

        .action-button.remove:hover {
            color: #b02a37;
            background-color: #fef2f2;
        }

        .action-button:hover {
            background-color: #ede9fe;
        }

        .toast {
            min-width: 200px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<%- include("../../views/partials/user/header") %>

    <body class="bg-white text-gray-800">
        <div class="container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-6">
            <div class="flex flex-col lg:flex-row gap-4">
                <div class="w-full lg:w-2/3">
                    <div class="bg-white rounded-lg shadow-md p-3 sm:p-4 lg:p-6">
                        <h3 class="text-base sm:text-lg lg:text-xl font-semibold flex items-center mb-3 sm:mb-4">
                            <i class="fas fa-shopping-cart mr-2 text-black"></i>Shopping Cart
                        </h3>
                        <div id="cart-items">
                            <% if (cartItems && cartItems.length> 0) { %>
                                <% cartItems.forEach((item, index)=> { %>
                                    <div class="cart-item flex flex-col sm:flex-row items-start sm:items-center py-2 sm:py-3 lg:py-4 border-b border-gray-200 last:border-b-0 <%= item.product.quantity === 0 ? 'opacity-75' : '' %>"
                                        data-product-id="<%= item.product._id %>" data-index="<%= index %>"
                                        data-stock="<%= item.product.quantity %>">
                                        <a href="/product/details/<%= item.product._id %>">
                                            <img src="<%= item.product.productImage && item.product.productImage[0] || 'https://via.placeholder.com/80?text=Product' %>"
                                                alt="<%= item.product.productName %>"
                                                onerror="this.src='https://via.placeholder.com/80?text=Product'">
                                        </a>
                                        <div class="flex-1 mt-2 sm:mt-0">
                                            <h5 class="text-sm sm:text-base font-semibold">
                                                <%= item.product.productName %>
                                            </h5>
                                            <% if (item.product.brand) { %>
                                                <p class="text-xs sm:text-sm text-gray-500">
                                                    <%= item.product.brand.name || item.product.brand %>
                                                </p>
                                                <% } %>
                                                    <div class="text-yellow-500 text-xs flex mb-1 sm:mb-2">
                                                        <i class="fas fa-star mr-0.5"></i>
                                                        <i class="fas fa-star mr-0.5"></i>
                                                        <i class="fas fa-star mr-0.5"></i>
                                                        <i class="fas fa-star mr-0.5"></i>
                                                        <i class="fas fa-star-half-alt"></i>
                                                    </div>
                                                    <% if (item.product.quantity===0) { %>
                                                        <div class="text-red-500 text-xs sm:text-sm mb-1 sm:mb-2">
                                                            <i class="fas fa-times-circle mr-1"></i>Out of Stock
                                                        </div>
                                                        <% } %>
                                                            <div
                                                                class="quantity-control flex items-center mb-1 sm:mb-2 gap-10">
                                                                <div
                                                                    class="quantity-control flex items-center mb-1 sm:mb-2">

                                                                    <button type="button"
                                                                        onclick="updateQuantity('<%= item.product._id %>', <%= item.quantity - 1 %>)"
                                                                        class="w-7 sm:w-8 h-7 sm:h-8 border border-gray-300 rounded-l-md flex items-center justify-center text-sm hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
                                                                        <%=(item.quantity <=1 ||
                                                                        item.product.quantity===0)
                                                                        ? 'disabled="disabled"' : '' %>
                                                                        aria-label="Decrease quantity">
                                                                        -
                                                                    </button>


                                                                    <input type="text" value="<%= item.quantity %>"
                                                                        readonly
                                                                        class="w-9 sm:w-10 h-7 sm:h-8 text-center border-t border-b border-gray-300 text-xs sm:text-sm bg-white"
                                                                        aria-label="Quantity">

                                                                    <button type="button"
                                                                        onclick="updateQuantity('<%= item.product._id %>', <%= item.quantity + 1 %>)"
                                                                        class="w-7 sm:w-8 h-7 sm:h-8 border border-gray-300 rounded-r-md flex items-center justify-center text-sm hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
                                                                        <%=(item.quantity>= item.product.quantity ||
                                                                        item.product.quantity === 0) ?
                                                                        'disabled="disabled"' : '' %>
                                                                        aria-label="Increase quantity">
                                                                        +
                                                                    </button>

                                                                </div>

                                                                <div>
                                                                    <div class="flex gap-2 sm:gap-3 text-xs sm:text-sm">
                                                                        <button
                                                                            class="action-button text-black font-medium flex items-center"
                                                                            onclick="moveToWishlist('<%= item.product._id %>', event)"
                                                                            aria-label="Move to wishlist">
                                                                            <i class="far fa-heart mr-1"></i>Move to
                                                                            Favorites
                                                                        </button>
                                                                        <button
                                                                            class="action-button remove text-red-500 font-medium flex items-center"
                                                                            onclick="openRemoveCartModal('<%= item.product._id %>')"
                                                                            aria-label="Remove from cart">
                                                                            <i class="fas fa-times mr-1"></i>Remove
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            </div>

                                        </div>
                                        <div class="item-price text-sm sm:text-base font-semibold text-black mt-2 sm:mt-0 sm:ml-3 lg:ml-4 text-right"
                                            data-price="<%= item.product.salePrice || item.product.regularPrice || 0 %>">
                                            ₹<%= (item.totalPrice || item.product.salePrice ||
                                                0).toLocaleString('en-IN') %>
                                        </div>
                                    </div>
                                    <% }) %>
                                        <% } else { %>
                                            <div class="text-center py-6 sm:py-8 text-gray-500">
                                                <i
                                                    class="fas fa-shopping-cart text-2xl sm:text-3xl lg:text-4xl mb-2 text-gray-300"></i>
                                                <h4 class="text-sm sm:text-base lg:text-lg font-semibold">Your cart is
                                                    empty</h4>
                                                <p class="text-xs sm:text-sm lg:text-base">Add some products to get
                                                    started!</p>
                                            </div>
                                            <% } %>
                        </div>
                        <a href="/shop"
                            class="inline-flex items-center text-xs sm:text-sm lg:text-base text-blue-600 hover:text-blue-800 mt-3 sm:mt-4">
                            <i class="fas fa-arrow-left mr-1"></i>Back to Shop
                        </a>
                    </div>
                </div>
                <div class="w-full lg:w-1/3">
                    <div class="bg-white rounded-lg shadow-md p-3 sm:p-4 lg:p-6">
                        <h4 class="text-base sm:text-lg lg:text-xl font-semibold mb-3 sm:mb-4">Order Summary</h4>
                        <div id="order-summary-items">
                            <% if (cartItems && cartItems.length> 0) { %>
                                <% let subtotal=0; cartItems.forEach(item=> {
                                    subtotal += (item.product.salePrice || item.product.regularPrice || 0) *
                                    item.quantity;
                                    }); %>
                                    <% const discount=subtotal> 1500 ? 200 : 0; %>
                                        <% const deliveryCharge=subtotal> 2000 ? 0 : 50; %>
                                            <% const gst=Math.round(subtotal * 0.18); %>
                                                <% const total=subtotal + deliveryCharge + gst - discount; %>
                                                    <div
                                                        class="flex justify-between text-xs sm:text-sm lg:text-base mb-1 sm:mb-2">
                                                        <span>Subtotal (<%= cartItems.length %> items)</span>
                                                        <span>₹<%= subtotal.toLocaleString('en-IN') %></span>
                                                    </div>
                                                    <div
                                                        class="flex justify-between text-xs sm:text-sm lg:text-base mb-1 sm:mb-2 text-green-600">
                                                        <span>Discount</span>
                                                        <span>- ₹<%= discount.toLocaleString('en-IN') %></span>
                                                    </div>
                                                    <div
                                                        class="flex justify-between text-xs sm:text-sm lg:text-base mb-1 sm:mb-2">
                                                        <span>Delivery Charge</span>
                                                        <span
                                                            class="<%= deliveryCharge === 0 ? 'text-green-600' : '' %>">
                                                            ₹<%= deliveryCharge.toLocaleString('en-IN') %>
                                                                <% if (deliveryCharge===0) { %> FREE DELIVERY<% } %>
                                                        </span>
                                                    </div>
                                                    <div
                                                        class="flex justify-between text-xs sm:text-sm lg:text-base mb-1 sm:mb-2">
                                                        <span>GST (18%)</span>
                                                        <span>₹<%= gst.toLocaleString('en-IN') %></span>
                                                    </div>
                                                    <div
                                                        class="flex justify-between text-sm sm:text-base lg:text-lg font-semibold mt-2 sm:mt-3 pt-2 sm:pt-3 border-t-2 border-gray-200">
                                                        <span>TOTAL</span>
                                                        <span>₹<%= total.toLocaleString('en-IN') %></span>
                                                    </div>
                                                    <% } else { %>
                                                        <div
                                                            class="flex justify-between text-xs sm:text-sm lg:text-base mb-1 sm:mb-2">
                                                            <span>Subtotal (0 items)</span>
                                                            <span>₹0</span>
                                                        </div>
                                                        <div
                                                            class="flex justify-between text-sm sm:text-base lg:text-lg font-semibold mt-2 sm:mt-3 pt-2 sm:pt-3 border-t-2 border-gray-200">
                                                            <span>TOTAL</span>
                                                            <span>₹0</span>
                                                        </div>
                                                        <% } %>
                        </div>
                        <button id="checkout-btn"
                            class="w-full bg-black text-white rounded-md py-2 sm:py-2.5 lg:py-3 text-xs sm:text-sm lg:text-base font-semibold hover:bg-gray-800 disabled:bg-gray-500 disabled:cursor-not-allowed mt-3 sm:mt-4"
                            <%=(!cartItems || cartItems.length===0) ? 'disabled' : '' %>>
                            Proceed to Checkout
                        </button>
                        <div id="cart-error" class="text-red-500 text-xs sm:text-sm mt-2 hidden"></div>
                    </div>
                </div>
            </div>
            <div id="removeCartModal"
                class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden z-50">
                <div class="bg-white rounded-lg p-3 sm:p-4 lg:p-6 w-full max-w-[320px] sm:max-w-md">
                    <div class="flex items-center mb-2 sm:mb-3 lg:mb-4">
                        <i class="fas fa-exclamation-triangle text-red-500 mr-2"></i>
                        <h2 class="text-sm sm:text-base lg:text-lg font-semibold">Confirm Removal</h2>
                    </div>
                    <p class="text-xs sm:text-sm lg:text-base text-gray-700 mb-2 sm:mb-3 lg:mb-4">
                        Are you sure you want to remove this item from your cart?
                    </p>
                    <div class="flex justify-end gap-2 sm:gap-3">
                        <button type="button"
                            class="px-2 sm:px-3 lg:px-4 py-1 sm:py-1.5 lg:py-2 bg-gray-300 text-gray-700 rounded text-xs sm:text-sm lg:text-base hover:bg-gray-400"
                            onclick="closeRemoveCartModal()">Cancel</button>
                        <button type="button"
                            class="px-2 sm:px-3 lg:px-4 py-1 sm:py-1.5 lg:py-2 bg-red-600 text-white rounded text-xs sm:text-sm lg:text-base hover:bg-red-700 flex items-center"
                            onclick="confirmRemoveCartItem()">
                            <i class="fas fa-times mr-1"></i>Confirm
                        </button>
                    </div>
                </div>
            </div>
            <div id="toastContainer" class="fixed top-4 sm:top-5 right-4 sm:right-5 z-[2000] flex flex-col gap-2"></div>
        </div>
        <%- include("../../views/partials/user/footer") %>
            <script>
                const MAX_QUANTITY_PER_PRODUCT = 10;
                let productIdToRemove = null;

                document.addEventListener('DOMContentLoaded', function () {
                    initializeWishlistButtons();
                    initializeCartButtons();
                    const cartItems = document.querySelectorAll('.cart-item[data-product-id]');
                    cartItems.forEach(item => {
                        const stockLevel = parseInt(item.dataset.stock || 0);
                        const quantity = parseInt(item.querySelector('.quantity-control input').value);
                        updateCartItemUI(item, quantity, stockLevel);
                    });
                    updateOrderSummary();
                    const checkoutBtn = document.getElementById('checkout-btn');
                    if (checkoutBtn) {
                        checkoutBtn.addEventListener('click', function () {
                            const hasItems = document.querySelectorAll('.cart-item[data-product-id]').length > 0;
                            const outOfStockItems = document.querySelectorAll('.cart-item.opacity-75');
                            if (!hasItems) {
                                showToast('Your cart is empty', 'error');
                                return;
                            }
                            if (outOfStockItems.length > 0) {
                                showToast('Please remove out-of-stock items before checkout', 'error');
                                return;
                            }
                            const cartItems = document.querySelectorAll('.cart-item[data-product-id]');
                            let hasZeroStock = false;
                            cartItems.forEach(item => {
                                const stockLevel = parseInt(item.dataset.stock || 0);
                                if (stockLevel === 0) hasZeroStock = true;
                            });
                            if (hasZeroStock) {
                                showToast('Some items are out of stock. Please remove them to continue.', 'error');
                                return;
                            }
                            window.location.href = '/select-address';
                        });
                    }
                    const removeCartModal = document.getElementById('removeCartModal');
                    if (removeCartModal) {
                        removeCartModal.addEventListener('click', function (e) {
                            if (e.target === this) closeRemoveCartModal();
                        });
                    }
                });

                function openRemoveCartModal(productId) {
                    productIdToRemove = productId;
                    document.getElementById('removeCartModal').classList.remove('hidden');
                }

                function closeRemoveCartModal() {
                    document.getElementById('removeCartModal').classList.add('hidden');
                    productIdToRemove = null;
                }

                function initializeCartButtons() {
                    const cartButtons = document.querySelectorAll('.add-to-cart');
                    const productIds = Array.from(cartButtons).map(btn => btn.getAttribute('data-product-id')).filter(Boolean);
                    if (productIds.length === 0) return;
                    fetch('/cart/status', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ productIds })
                    })
                        .then(res => res.json())
                        .then(data => {
                            if (data.success) {
                                cartButtons.forEach(button => {
                                    const productId = button.getAttribute('data-product-id');
                                    if (data.cartStatus[productId]) {
                                        button.innerHTML = '<i class="fas fa-shopping-cart mr-3"></i> Go to Cart';
                                        button.classList.add('bg-black');
                                        const newButton = button.cloneNode(true);
                                        button.parentNode.replaceChild(newButton, button);
                                        newButton.addEventListener('click', () => {
                                            window.location.href = '/cart';
                                        });
                                    }
                                });
                            }
                        })
                        .catch(err => console.error('Cart status error:', err));
                }

                function initializeWishlistButtons() {
                    const wishlistButtons = document.querySelectorAll('.add-to-wishlist');
                    const productIds = Array.from(wishlistButtons).map(btn => btn.getAttribute('data-product-id')).filter(Boolean);
                    if (productIds.length === 0) return;
                    fetch('/wishlist/status', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ productIds })
                    })
                        .then(response => {
                            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                wishlistButtons.forEach(button => {
                                    const productId = button.getAttribute('data-product-id');
                                    if (data.wishlistStatus[productId]) {
                                        button.innerHTML = '<i class="fas fa-heart"></i>';
                                        button.classList.add('active');
                                    } else {
                                        button.innerHTML = '<i class="far fa-heart"></i>';
                                        button.classList.remove('active');
                                    }
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching wishlist status:', error);
                            wishlistButtons.forEach(button => {
                                button.innerHTML = '<i class="far fa-heart"></i>';
                                button.classList.remove('active');
                            });
                        });
                }

                function addToCart(productId, button) {
                    if (!productId) {
                        showToast('Invalid product ID', 'error');
                        return;
                    }
                    fetch('/cart/add', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ productId, quantity: 1 })
                    })
                        .then(response => {
                            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                showToast('Product added to cart!', 'success');
                                updateCartCounter(data.cartCount);
                                if (button) {
                                    button.innerHTML = '<i class="fas fa-shopping-cart mr-3"></i> Go to Cart';
                                    button.classList.add('bg-black');
                                    const newButton = button.cloneNode(true);
                                    button.parentNode.replaceChild(newButton, button);
                                    newButton.addEventListener('click', () => {
                                        window.location.href = '/cart';
                                    });
                                }
                            } else {
                                showToast(data.message || 'Failed to add product to cart', 'error');
                                if (data.message?.includes('login')) {
                                    setTimeout(() => window.location.href = '/login', 2000);
                                }
                            }
                        })
                        .catch(error => {
                            console.error('Add to cart error:', error);
                            showToast('Please login & try again', 'error');
                            setTimeout(() => window.location.href = '/login', 2000);
                        });
                }

                function toggleWishlist(productId, button) {
                    if (!productId) {
                        showToast('Invalid product ID', 'error');
                        return;
                    }
                    button.disabled = true;
                    const originalHTML = button.innerHTML;
                    const wasActive = button.classList.contains('active');
                    if (wasActive) {
                        button.innerHTML = '<i class="far fa-heart"></i>';
                        button.classList.remove('active');
                    } else {
                        button.innerHTML = '<i class="fas fa-heart"></i>';
                        button.classList.add('active');
                    }
                    const url = wasActive ? `/wishlist/remove/${productId}` : '/addtowishlist';
                    const method = wasActive ? 'DELETE' : 'POST';
                    const fetchOptions = {
                        method: method,
                        headers: { 'Content-Type': 'application/json' },
                        ...(method === 'POST' && { body: JSON.stringify({ productId }) })
                    };
                    fetch(url, fetchOptions)
                        .then(response => {
                            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                updateWishlistCounter(data.wishlistCount);
                            } else {
                                button.innerHTML = originalHTML;
                                if (wasActive) button.classList.add('active');
                                else button.classList.remove('active');
                                if (data.message?.includes('login')) {
                                    showToast('Please login to manage wishlist', 'error');
                                    setTimeout(() => window.location.href = '/login', 2000);
                                } else if (data.message?.includes('blocked')) {
                                    showToast('Your account is blocked', 'error');
                                    setTimeout(() => window.location.href = '/login', 2000);
                                } else {
                                    showToast(data.message || 'Wishlist update failed', 'error');
                                }
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            button.innerHTML = originalHTML;
                            if (wasActive) button.classList.add('active');
                            else button.classList.remove('active');
                            showToast('An error occurred. Please try again.', 'error');
                        })
                        .finally(() => {
                            button.disabled = false;
                        });
                }

                async function confirmRemoveCartItem() {
                    if (!productIdToRemove) return;
                    try {
                        showLoading(true);
                        const response = await fetch('/cart/remove', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ productId: productIdToRemove })
                        });
                        const result = await response.json();
                        if (result.success) {
                            const removedItem = document.querySelector(`.cart-item[data-product-id="${productIdToRemove}"]`);
                            if (removedItem) removedItem.remove();
                            window.updateCartBadge();
                            updateOrderSummary();
                            showToast('Item removed from cart', 'success');
                        } else {
                            showToast(result.message || 'Failed to remove item', 'error');
                        }
                    } catch (error) {
                        console.error('Error removing item:', error);
                        showToast('Error removing item from cart', 'error');
                    } finally {
                        showLoading(false);
                        closeRemoveCartModal();
                    }
                }

                async function moveToWishlist(productId, event) {
                    event.preventDefault();
                    try {
                        showLoading(true);
                        const wishlistResponse = await fetch('/addtowishlist', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ productId })
                        });
                        const wishlistResult = await wishlistResponse.json();
                        if (wishlistResult.success) {
                            const cartResponse = await fetch('/cart/remove', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ productId })
                            });
                            const cartResult = await cartResponse.json();
                            if (cartResult.success) {
                                const removedItem = document.querySelector(`.cart-item[data-product-id="${productId}"]`);
                                if (removedItem) removedItem.remove();
                                updateOrderSummary();
                                window.updateWishlistBadge();
                                window.updateCartBadge();
                                showToast('Item moved to wishlist', 'success');
                            } else {
                                showToast('Added to wishlist but failed to remove from cart', 'warning');
                            }
                        } else {
                            showToast(wishlistResult.message || 'Failed to add to wishlist', 'error');
                        }
                    } catch (error) {
                        console.error('Error moving to wishlist:', error);
                        showToast('Error moving item to wishlist', 'error');
                    } finally {
                        showLoading(false);
                    }
                }

                async function updateQuantity(productId, newQuantity) {
                    if (newQuantity < 1) return;
                    const cartItem = document.querySelector(`.cart-item[data-product-id="${productId}"]`);
                    if (!cartItem) return;
                    const stockLevel = parseInt(cartItem.dataset.stock || 0);
                    if (stockLevel === 0) {
                        showToast('This product is currently out of stock', 'error');
                        return;
                    }
                    if (newQuantity > MAX_QUANTITY_PER_PRODUCT) {
                        showToast(`Maximum quantity allowed is ${MAX_QUANTITY_PER_PRODUCT}`, 'error');
                        return;
                    }
                    if (newQuantity > stockLevel) {
                        showToast(`Only ${stockLevel} items available in stock`, 'error');
                        return;
                    }
                    try {
                        showItemLoading(cartItem, true);
                        const response = await fetch('/cart/update-quantity', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ productId, quantity: newQuantity })
                        });
                        const result = await response.json();
                        if (result.success) {
                            updateCartItemUI(cartItem, newQuantity, stockLevel);
                            updateOrderSummary();
                        } else {
                            showToast(result.message || 'Failed to update quantity', 'error');
                        }
                    } catch (error) {
                        console.error('Error updating quantity:', error);
                        showToast('Error updating quantity', 'error');
                    } finally {
                        showItemLoading(cartItem, false);
                    }
                }

                function updateCartItemUI(cartItem, newQuantity, stockLevel = null) {
                    const quantityInput = cartItem.querySelector('.quantity-control input');
                    const priceElement = cartItem.querySelector('.item-price');
                    const decreaseBtn = cartItem.querySelector('.quantity-control button:first-child');
                    const increaseBtn = cartItem.querySelector('.quantity-control button:last-child');
                    quantityInput.value = newQuantity;
                    const unitPrice = parseFloat(priceElement.getAttribute('data-price'));
                    const newTotalPrice = unitPrice * newQuantity;
                    priceElement.textContent = `₹${newTotalPrice.toLocaleString('en-IN')}`;
                    const currentStock = stockLevel || parseInt(cartItem.dataset.stock || 0);
                    decreaseBtn.disabled = newQuantity <= 1 || currentStock === 0;
                    increaseBtn.disabled = newQuantity >= currentStock || currentStock === 0 || newQuantity >= MAX_QUANTITY_PER_PRODUCT;
                    if (currentStock === 0) {
                        cartItem.classList.add('opacity-75');
                    } else {
                        cartItem.classList.remove('opacity-75');
                    }
                    const productId = cartItem.dataset.productId;
                    decreaseBtn.setAttribute('onclick', `updateQuantity('${productId}', ${newQuantity - 1})`);
                    increaseBtn.setAttribute('onclick', `updateQuantity('${productId}', ${newQuantity + 1})`);
                }

                function updateOrderSummary() {
                    const cartItems = document.querySelectorAll('.cart-item[data-product-id]');
                    const itemCount = cartItems.length;
                    if (itemCount === 0) {
                        document.getElementById('cart-items').innerHTML = `
                    <div class="text-center py-6 sm:py-8 text-gray-500">
                        <i class="fas fa-shopping-cart text-2xl sm:text-3xl lg:text-4xl mb-2 text-gray-300"></i>
                        <h4 class="text-sm sm:text-base lg:text-lg font-semibold">Your cart is empty</h4>
                        <p class="text-xs sm:text-sm lg:text-base">Add some products to get started!</p>
                    </div>`;
                        document.getElementById('order-summary-items').innerHTML = `
                    <div class="flex justify-between text-xs sm:text-sm lg:text-base mb-1 sm:mb-2">
                        <span>Subtotal (0 items)</span>
                        <span>₹0</span>
                    </div>
                    <div class="flex justify-between text-sm sm:text-base lg:text-lg font-semibold mt-2 sm:mt-3 pt-2 sm:pt-3 border-t-2 border-gray-200">
                        <span>TOTAL</span>
                        <span>₹0</span>
                    </div>`;
                        document.getElementById('checkout-btn').setAttribute('disabled', 'true');
                        return;
                    }
                    let subtotal = 0;
                    let hasOutOfStock = false;
                    cartItems.forEach(item => {
                        const priceElement = item.querySelector('.item-price');
                        const unitPrice = parseFloat(priceElement.getAttribute('data-price'));
                        const quantity = parseInt(item.querySelector('.quantity-control input').value);
                        const stockLevel = parseInt(item.dataset.stock || 0);
                        if (stockLevel === 0) hasOutOfStock = true;
                        subtotal += unitPrice * quantity;
                    });
                    const discount = subtotal > 1500 ? 200 : 0;
                    const deliveryCharge = subtotal > 2000 ? 0 : 50;
                    const gst = Math.round(subtotal * 0.18);
                    const total = subtotal + deliveryCharge + gst - discount;
                    document.getElementById('order-summary-items').innerHTML = `
                <div class="flex justify-between text-xs sm:text-sm lg:text-base mb-1 sm:mb-2">
                    <span>Subtotal (${itemCount} items)</span>
                    <span>₹${subtotal.toLocaleString('en-IN')}</span>
                </div>
                <div class="flex justify-between text-xs sm:text-sm lg:text-base mb-1 sm:mb-2 text-green-600">
                    <span>Discount</span>
                    <span>- ₹${discount.toLocaleString('en-IN')}</span>
                </div>
                <div class="flex justify-between text-xs sm:text-sm lg:text-base mb-1 sm:mb-2">
                    <span>Delivery Charge</span>
                    <span class="${deliveryCharge === 0 ? 'text-green-600' : ''}">
                        ₹${deliveryCharge.toLocaleString('en-IN')}
                        ${deliveryCharge === 0 ? ' FREE DELIVERY' : ''}
                    </span>
                </div>
                <div class="flex justify-between text-xs sm:text-sm lg:text-base mb-1 sm:mb-2">
                    <span>GST (18%)</span>
                    <span>₹${gst.toLocaleString('en-IN')}</span>
                </div>
                <div class="flex justify-between text-sm sm:text-base lg:text-lg font-semibold mt-2 sm:mt-3 pt-2 sm:pt-3 border-t-2 border-gray-200">
                    <span>TOTAL</span>
                    <span>₹${total.toLocaleString('en-IN')}</span>
                </div>`;
                    const checkoutBtn = document.getElementById('checkout-btn');
                    if (hasOutOfStock) {
                        checkoutBtn.setAttribute('disabled', 'true');
                        checkoutBtn.textContent = 'Remove Out of Stock Items';
                    } else {
                        checkoutBtn.removeAttribute('disabled');
                        checkoutBtn.textContent = 'Proceed to Checkout';
                    }
                }

                function showItemLoading(cartItem, show) {
                    const buttons = cartItem.querySelectorAll('.quantity-control button, .action-button');
                    buttons.forEach(el => {
                        if (show) {
                            el.style.pointerEvents = 'none';
                            el.style.opacity = '0.6';
                        } else {
                            el.style.pointerEvents = '';
                            el.style.opacity = '';
                        }
                    });
                }

                function showLoading(show) {
                    const elements = document.querySelectorAll('button, .cart-item');
                    elements.forEach(el => {
                        if (show) {
                            el.classList.add('opacity-50', 'pointer-events-none');
                        } else {
                            el.classList.remove('opacity-50', 'pointer-events-none');
                        }
                    });
                }
            </script>
    </body>

</html>