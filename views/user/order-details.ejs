<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <style>
        
        .shop-header {
            background-color: white;
            border-bottom: 1px solid var(--border-color);
            padding: 1.5rem 0;
            margin-bottom: 2rem;
        }

        .cancelled-item {
            opacity: 0.6;
            background-color: #f9fafb;
        }

        .status-tracker .step {
            transition: all 0.3s ease;
        }

        .status-tracker .step.active {
            color: #2563eb;
        }

        .status-tracker .step.completed {
            color: #10b981;
        }

        .status-tracker .step.cancelled {
            color: #ef4444;
        }
    </style>
</head>

<body class="bg-white font-sans">
    <!-- Header Include -->
    <%-include("../../views/partials/user/header")%>
    
    <!-- Breadcrumb -->
    <div class="shop-header">
        <div class="max-w-7xl mx-auto px-4">
            <nav aria-label="breadcrumb">
                <ol class="flex space-x-2 text-sm">
                    <li><a href="/" class="text-blue-600 hover:underline">Home</a></li>
                    <li><a href="/orders" class="text-blue-600 hover:underline"><span class="mx-2 text-gray-600">></span>Orders</a></li>
                    <li class="flex items-center"><span class="mx-2">></span><span class="text-gray-500"><%= order.orderId %></span></li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="max-w-5xl mx-auto p-4 bg-white shadow-md rounded-lg mt-6">
        <!-- Order Header -->
        <% 
        const allItemsCancelled = order.orderedItems.every(item => item.status === 'cancelled');
        const hasActiveitems = order.orderedItems.some(item => item.status !== 'cancelled');
        const activeItemsTotal = order.orderedItems
            .filter(item => item.status !== 'cancelled')
            .reduce((sum, item) => sum + (item.price * item.quantity), 0);
        %>

        <div class="flex justify-between items-center border-b pb-4">
            <div>
                <h1 class="text-lg font-semibold">Order #<%= order.orderId %></h1>
                <p class="text-sm text-gray-500">
                    Placed on 
                    <%= new Date(order.createdOn).toLocaleString('en-GB', { 
                        day: '2-digit', 
                        month: 'short', 
                        year: 'numeric', 
                        hour: '2-digit', 
                        minute: '2-digit', 
                        hour12: true 
                    }) %>
                </p>
                <span class="inline-block mt-2 px-3 py-1 text-xs font-semibold rounded-full 
                    <%= order.status === 'cancelled' || allItemsCancelled ? 'bg-red-100 text-red-800' : 
                     order.status === 'failed' ? 'bg-red-100 text-red-800':
                      order.status === 'return_rejected' ? 'bg-red-100 text-red-800':
                        order.status === 'delivered' ? 'bg-green-100 text-green-800' : 
                        order.status === 'return_requested'? 'bg-orange-100 text-orange-800' :
                        order.status === 'confirmed' ? 'bg-blue-100 text-blue-800':
                        order.status=== 'returned' ? 'bg-gray-100 text-gray-800' : 
                        order.status==='pending'? 'bg-yellow-100 text-yellow-800' :
                        order.status === 'shipped' ? 'bg-purple-100 text-purple-800' : 'bg-blue-100 text-blue-600' %>">
                    <%= order.status === 'cancelled' || allItemsCancelled ? 'Cancelled' : 
                        order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                </span>
            </div>
            
            <div class="flex space-x-3">
                <a href="/order/invoice/<%= order._id %>"
                   class="text-blue-600 text-sm hover:underline inline-flex items-center">
                    <i class="fas fa-download mr-2"></i> Download Invoice
                </a>
<% if (order.status === 'delivered' && !allItemsCancelled) { %>
    <form action="/orders/<%= order._id %>/return" method="POST">
        <button type="button" onclick="openReturnModal()" class="text-yellow-600 text-sm hover:underline font-medium">
            <i class="fas fa-undo mr-1"></i> Return Order
        </button>
    </form>
<% } %>

                <% if (order.status === 'cancelled' || allItemsCancelled) { %>
                    <span class="text-red-600 text-sm">Order Cancelled</span>
                <% } else if (order.status === 'pending' || order.status === 'confirmed') { %>
                    <button id="cancelOrderBtn" class="text-red-600 text-sm hover:underline font-medium"
                        data-order-id="<%= order._id %>">
                        <i class="fas fa-times mr-1"></i> Cancel Order
                    </button>
                <% } %>
            </div>
        </div>

        <!-- Order Status Tracker -->
        <div class="py-6 status-tracker">
            <% if (['cancelled','returned','return_requested','returning','return_rejected'].includes(order.status)||allItemsCancelled) { %>
                <div class="flex items-center justify-center">
                    <%if(order.status==='cancelled'){%>
                    <div class="flex items-center space-x-2 text-red-600">
                        <div class="w-8 h-8 bg-red-600 rounded-full flex items-center justify-center">
                            <i class="fas fa-times text-white"></i>
                        </div>
                        <p class="text-sm font-medium">Order cancelled</p>
                    </div>
                    <%}%>
                    <%if(order.status==='return_requested'){%>
                         <div class="flex items-center space-x-2 text-yellow-600">
                        <div class="w-8 h-8 bg-yellow-600 rounded-full flex items-center justify-center">
                           <i class="fas fa-undo-alt text-white"></i>



                        </div>
                        <p class="text-sm font-medium">Return requested</p>
                    </div>
                        <%}%>
                         <%if(order.status==='returning'){%>
                         <div class="flex items-center space-x-2 text-blue-600">
                        <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                           <i class="fas fa-shipping-fast fa-flip-horizontal text-white"></i>

                        </div>
                        <p class="text-sm font-medium">Returning</p>
                    </div>
                        <%}%>
                        <%if(order.status==='returned'){%>
                         <div class="flex items-center space-x-2 text-gray-600">
                        <div class="w-8 h-8 bg-gray-600 rounded-full flex items-center justify-center">
                           <i class="fas fa-truck fa-flip-horizontal text-white"></i>

                        </div>
                        <p class="text-sm font-medium">Returned</p>
                    </div>
                        <%}%>
                        <%if(order.status==='return_rejected'){%>
                         <div class="flex items-center space-x-2 text-red-600">
                        <div class="w-8 h-8 bg-red-600 rounded-full flex items-center justify-center">
                            <i class="fas fa-times text-white"></i>
                        </div>
                        <p class="text-sm font-medium">Return rejected</p>
                        
                    </div>
                        <%}%>

                </div>
            <% } else { %>
                <div class="flex items-center justify-between">

    <!-- Pending -->
    <div class="flex items-center space-x-2">
        <div class="w-6 h-6 <%= order.status === 'pending' ? 'bg-yellow-500' : 'bg-green-600' %> rounded-full flex items-center justify-center">
            <% if (order.status !== 'pending') { %>
                <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
            <% } %>
        </div>
        <div>
            <p class="text-sm font-medium">Pending</p>
            <p class="text-xs text-gray-500"><%= new Date(order.createdOn).toLocaleDateString('en-GB') %></p>
        </div>
    </div>

    <div class="flex-1 h-1 <%= ['confirmed', 'shipped', 'delivered'].includes(order.status) ? 'bg-blue-600' : 'bg-gray-200' %> mx-2"></div>

    <!-- Confirmed -->
    <div class="flex items-center space-x-2">
        <div class="w-6 h-6 <%= ['confirmed', 'shipped', 'delivered'].includes(order.status) ? 'bg-blue-600' : 'bg-gray-300' %> rounded-full flex items-center justify-center">
            <% if (['confirmed', 'shipped', 'delivered'].includes(order.status)) { %>
                
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7">	<i class="fas fa-check-circle text-white"></i>
</path>
            
            <% } %>
        </div>
        <div>
            <p class="text-sm font-medium">Confirmed</p>
        </div>
    </div>

    <div class="flex-1 h-1 <%= ['shipped', 'delivered'].includes(order.status) ? 'bg-blue-600' : 'bg-gray-200' %> mx-2"></div>

    <!-- Shipped -->
    <div class="flex items-center space-x-2">
        <div class="w-6 h-6 <%= ['shipped', 'delivered'].includes(order.status) ? 'bg-blue-600' : 'bg-gray-300' %> rounded-full flex items-center justify-center">
            <% if (['shipped', 'delivered'].includes(order.status)) { %>
               
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"><i class="fas fa-shipping-fast text-white"></i>
</path>
        
            <% } %>
        </div>
        <div>
            <p class="text-sm font-medium">Shipped</p>
            <% if (order.shippedDate) { %>
                <p class="text-xs text-gray-500"><%= new Date(order.shippedDate).toLocaleDateString('en-GB') %></p>
            <% } %>
        </div>
    </div>

    <div class="flex-1 h-1 <%= order.status === 'delivered' ? 'bg-blue-600' : 'bg-gray-200' %> mx-2"></div>

    <!-- Delivered -->
    <div class="flex items-center space-x-2">
        <div class="w-6 h-6 <%= order.status === 'delivered' ? 'bg-green-600' : 'bg-gray-300' %> rounded-full flex items-center justify-center">
            <% if (order.status === 'delivered') { %>
              
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7">	<i class="fas fa-truck text-white"></i></path>
                
            <% } %>
        </div>
        <div>
            <p class="text-sm font-medium <%= order.status === 'delivered' ? 'text-green-600' : 'text-gray-500' %>">Delivered</p>
            <% if (order.deliveredDate) { %>
                <p class="text-xs text-gray-500"><%= new Date(order.deliveredDate).toLocaleDateString('en-GB') %></p>
            <% } %>
        </div>
    </div>
</div>

            <% } %>
        </div>

        <!-- Order Items -->
        <div class="border-t pt-4">
            <h2 class="text-lg font-semibold mb-4">Order Items</h2>
            <% order.orderedItems.forEach((item, index) => { %>
                <div class="flex justify-between items-start mb-6 p-4 border rounded-lg <%= item.status === 'cancelled' ? 'cancelled-item' : '' %>">
                    <div class="flex items-start space-x-4">
                        <img src="/<%= item.productImages && item.productImages[0] ? item.productImages[0] : 'default-image.jpg' %>"
                            alt="<%= item.productName %>" class="w-40 h-20 object-contain">
                        <div class="flex-1">
                            <h3 class="text-sm font-medium mb-1"><%= item.productName %></h3>
                            <div class="text-sm text-gray-600 space-y-1">
                                <p>Quantity: <span class="font-medium"><%= item.quantity %></span></p>
                                <p>Unit Price: <span class="font-medium">₹<%= item.price.toLocaleString('en-IN') %></span></p>
                                <p>Total: <span class="font-medium">₹<%= (item.price * item.quantity).toLocaleString('en-IN') %></span></p>
                                <% if (item.status !== 'cancelled') { %>
                                   <p class="text-blue-600">
  Expected Delivery: 
  <%= new Date(order.expectedDelivery).toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  }) %>
</p>

                                <% } %>
                            </div>
                        </div>
                    </div>
                    
                    <div class="text-right">
                        <%if(order.status==='return_rejected'){%>
                            <p class="text-xs text-red-600 font-medium">Rejected</p>
                            <p class="text-xs text-gray-400 mt-1">Reason: <%=order.rejectionReason%></p>
                            <%}%>
                        <% if (item.status === 'cancelled') { %>
                            <p class="text-xs text-red-600 font-medium">Cancelled</p>
                            <% if (item.cancelReason) { %>
                                <p class="text-xs text-gray-400 mt-1">Reason: <%= item.cancelReason %></p>
                            <% } %>

                            <!-- cancel item -->
                        <% } else if ((order.status === 'pending' || order.status === 'confirmed') && item.status !== 'cancelled') { %>
                            <%if(order.orderedItems.length>1){%>
                            <button class="cancel-item-btn text-red-600 text-xs hover:underline font-medium px-2 py-1 rounded hover:bg-red-50 transition-colors"
                                data-item-id="<%= item._id %>"
                                data-item-name="<%= item.productName %>">
                                <i class="fas fa-times mr-1"></i> Cancel Item
                            </button>
                            <%}%>

                            <!-- return item -->
                        <% }else if ((order.status === 'delivered') && item.status !== 'cancelled') { %>
                            <%if(order.orderedItems.length>1){%>
                            <button class="return-item-btn text-yellow-600 text-xs hover:underline font-medium px-2 py-1 rounded hover:bg-yellow-50 transition-colors"
                                data-item-id="<%= item._id %>"
                                data-item-name="<%= item.productName %>">
                                <i class="fas fa-undo mr-1"></i> Return item
                            </button>
                            <%}%>
                            <%}%>
                    </div>
                </div>
            <% }); %>
        </div>

        <!-- Order Summary -->
<div class="border-t pt-4 mt-4">
    <h2 class="text-lg font-semibold mb-4">Order Summary</h2>
    <div class="bg-gray-50 p-4 rounded-lg">
        <div class="space-y-2 text-sm">
            <%
            //Calculate totals for active items
            const activeItems = order.orderedItems.filter(item => item.status !== 'cancelled');
            const cancelledItems = order.orderedItems.filter(item => item.status === 'cancelled');
            
            const originalSubtotal = order.orderedItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            const activeSubtotal = activeItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            const cancelledSubtotal = cancelledItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            %>
            
            <div class="flex justify-between">
                <p>Original Subtotal (<%= order.orderedItems.length %> items)</p>
                <p>₹<%= originalSubtotal.toLocaleString('en-IN') %></p>
            </div>
            
            <% if (cancelledItems.length > 0) { %>
                <div class="flex justify-between text-red-600">
                    <p>Cancelled Items (<%= cancelledItems.length %> items)</p>
                    <p>-₹<%= cancelledSubtotal.toLocaleString('en-IN') %></p>
                </div>
                
                <% if (activeItems.length > 0) { %>
                    <div class="flex justify-between font-medium">
                        <p>Active Items Subtotal (<%= activeItems.length %> items)</p>
                        <p>₹<%= activeSubtotal.toLocaleString('en-IN') %></p>
                    </div>
                <% } %>
            <% } %>
            
            <% if (!allItemsCancelled && order.discount > 0) { %>
                <div class="flex justify-between">
                    <p>Discount</p>
                    <p class="text-green-600">-₹<%= (order.discount || 0).toLocaleString('en-IN') %></p>
                </div>
            <% } %>
              <% if (!allItemsCancelled && order.couponDiscount) { %>
                <div class="flex justify-between">
                    <p>Coupon discount</p>
                    <p class="text-green-600">-₹<%= (order.couponDiscount || 0).toLocaleString('en-IN') %></p>
                </div>
            <% } %>
            
            <% if (!allItemsCancelled) { %>
                <div class="flex justify-between">
                    <p>Delivery Charge</p>
                    <p>₹<%= (order.deliveryCharge || 0).toLocaleString('en-IN') %></p>
                </div>
                <div class="flex justify-between">
                    <p>GST (18%)</p>
                    <p>₹<%= (order.gstAmount || 0).toLocaleString('en-IN') %></p>
                </div>
            <% } %>
            
            <hr class="my-2">
            <div class="flex justify-between font-semibold text-lg">
                <p>TOTAL PAYABLE</p>
                <p class="<%= allItemsCancelled ? 'text-red-600' : '' %>">
                    <% if (allItemsCancelled) { %>
                        ₹0
                    <% } else { %>
                        ₹<%= order.finalAmount.toLocaleString('en-IN') %>
                    <% } %>
                </p>
            </div>
            
           <% if (cancelledItems.length > 0) { %>
  <div class="flex justify-between text-sm bg-blue-50 p-2 rounded mt-2 
              <%= order.paymentMethod === 'cod' ? 'text-orange-600' : 'text-blue-600' %>">
    <% if (order.paymentMethod === 'cod') { %>
      <p>Cash on Delivery Order</p>
      <p>No refund required</p>
    <% } else { %>
      <p>Refund Amount</p>
      <p>₹<%= (allItemsCancelled ? order.finalAmount : cancelledSubtotal).toLocaleString('en-IN') %></p>
    <% } %>
  </div>

  <% if (order.paymentMethod !== 'cod') { %>
    <p class="text-xs text-gray-500 mt-1">*Refund will be processed within 5-7 business days</p>
  <% } %>
<% } %>

        </div>
    </div>
</div>

        <!-- Address and Payment Info -->
        <div class="border-t pt-4 mt-4">
            <div class="grid grid-cols-1 md:grid-cols-2 justify-items-center gap-96">
                <!-- Shipping Address -->
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="text-md font-semibold mb-3 flex items-center">
                        <i class="fas fa-map-marker-alt mr-2 text-blue-600"></i>
                        Shipping Address
                    </h3>
                    <div class="text-sm text-gray-700 space-y-1">
                        <p class="font-medium"><%= order.address.name %></p>
                        <p><%= order.address.flat%>, <%= order.address.area %></p>
                        <p><%= order.address.city %>, <%= order.address.state %> - <%= order.address.pincode %></p>
                        <p><%= order.address.country %></p>
                        <p class="flex items-center mt-2">
                            <i class="fas fa-phone mr-2 text-gray-500"></i>
                            +91 <%= order.address.phone %>
                        </p>
                        <p class="flex items-center">
                            <i class="fas fa-envelope mr-2 text-gray-500"></i>
                            <%= user.email %>
                        </p>
                    </div>
                </div>
                
                <!-- Payment Info -->
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="text-md font-semibold mb-3 flex items-center">
                        <i class="fas fa-credit-card mr-2 text-blue-600"></i>
                        Payment Information
                    </h3>
                    <div class="text-sm text-gray-700 space-y-2">
                        <div class="flex items-center">
                            <span class="font-medium mr-2">Payment Method:</span>
                            <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs font-semibold">
                                <%= order.paymentMethod.toUpperCase() %>
                            </span>
                        </div>
                        <div class="flex items-center">
  <span class="font-medium mr-2">Payment Status:</span>
  <span class="inline-block mt-2 px-3 py-1 text-xs font-semibold rounded-full 
    <%= order.paymentStatus === 'Failed' ? 'bg-red-100 text-red-800' :
        order.paymentStatus === 'Refunded' ? 'bg-purple-100 text-purple-800' :
        order.paymentStatus === 'Paid' ? 'bg-green-100 text-green-800' :
        'bg-yellow-100 text-yellow-800' %>">
    <%= order.paymentStatus %>
  </span>
</div>

                        <p><span class="font-medium">Invoice Date:</span> 
                            <%= order.invoiceDate ? new Date(order.invoiceDate).toLocaleDateString('en-GB') : 'Not Available' %>
                        </p>
                        <% if (order.transactionId) { %>
                            <p><span class="font-medium">Transaction ID:</span> <%= order.transactionId %></p>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Return Order Modal -->
<div id="returnOrderModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4 shadow-xl">
        <div class="flex items-center mb-4">
            <i class="fas fa-undo text-yellow-600 mr-3"></i>
            <h2 class="text-lg font-semibold">Return Order</h2>
        </div>
        <p class="text-sm text-gray-700 mb-4">Please tell us why you want to return this order:</p>
        
        <!-- Changed form to div to handle with JavaScript -->
        <div id="returnForm">
            <div class="mb-4">
                <label for="returnReason" class="block text-sm font-medium text-gray-700 mb-2">Reason for return *</label>
                <select id="returnReason" name="returnReason" class="w-full p-2 border rounded-md focus:ring-yellow-500 focus:border-yellow-500" required>
                    <option value="">Select a reason</option>
                    <option value="Product damaged">Product damaged</option>
                    <option value="Wrong item delivered">Wrong item delivered</option>
                    <option value="Item doesn't match description">Item doesn't match description</option>
                    <option value="Quality not as expected">Quality not as expected</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            <div id="otherReturnReasonDiv" class="mb-4 hidden">
                <textarea name="otherReturnReason" id="otherReturnReason" class="w-full p-2 border rounded-md" rows="3" placeholder="Please specify your reason"></textarea>
            </div>
            <div class="flex justify-end space-x-3">
                <button type="button" id="closeReturnModalBtn" class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400">Cancel</button>
                <!-- Added proper ID and data attributes -->
                <button type="button" id="confirmReturnBtn" class="px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700" 
                        data-order-id="<%= order._id %>">
                    <i class="fas fa-undo mr-2"></i>Confirm Return
                </button>
            </div>
        </div>
    </div>
</div>


    <!-- Cancel Order Modal -->
    <div id="cancelOrderModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4 shadow-xl">
            <div class="flex items-center mb-4">
                <i class="fas fa-exclamation-triangle text-red-500 mr-3"></i>
                <h2 class="text-lg font-semibold">Cancel Order</h2>
            </div>
            <p class="text-sm text-gray-700 mb-4">Are you sure you want to cancel this entire order? This action cannot be undone.</p>
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">Reason for cancellation *</label>
                <select id="cancelReason" class="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500">
                    <option value="">Select a reason</option>
                    <option value="Changed my mind">Changed my mind</option>
                    <option value="Found better price elsewhere">Found better price elsewhere</option>
                    <option value="Ordered by mistake">Ordered by mistake</option>
                    <option value="Product not needed anymore">Product not needed anymore</option>
                    <option value="Delivery taking too long">Delivery taking too long</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            <div id="otherReasonDiv" class="mb-4 hidden">
                <textarea id="otherReason" class="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500" rows="3" placeholder="Please specify your reason"></textarea>
            </div>
            <div class="flex justify-end space-x-3">
                <button id="closeModalBtn" class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 transition-colors">
                    Cancel
                </button>
                <button id="confirmCancelBtn" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors" data-order-id="<%= order._id %>">
                    <i class="fas fa-times mr-2"></i>Confirm Cancellation
                </button>
            </div>
        </div>
    </div>

<!-- return item -->
    <div id="returnItemModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4 shadow-xl">
        <div class="flex items-center mb-4">
            <i class="fas fa-undo text-yellow-600 mr-3"></i>
            <h2 class="text-lg font-semibold">Return Order</h2>
             
        </div>
        
        <p class="text-sm text-gray-700 mb-4">Please tell us why you want to return this item:</p>
        <p id="returnItemName" class="text-sm font-medium text-gray-900 mb-4"></p>
        <!-- Changed form to div to handle with JavaScript -->
        <div id="returnForm">
            <div class="mb-4">
                <label for="returnItemReason" class="block text-sm font-medium text-gray-700 mb-2">Reason for return *</label>
                <select id="returnItemReason" name="returnItemReason" class="w-full p-2 border rounded-md focus:ring-yellow-500 focus:border-yellow-500" required>
                    <option value="">Select a reason</option>
                    <option value="Product damaged">Product damaged</option>
                    <option value="Wrong item delivered">Wrong item delivered</option>
                    <option value="Item doesn't match description">Item doesn't match description</option>
                    <option value="Quality not as expected">Quality not as expected</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            <div id="otherReturnItemReasonDiv" class="mb-4 hidden">
                <textarea name="otherReturnItemReason" id="otherReturnItemReason" class="w-full p-2 border rounded-md" rows="3" placeholder="Please specify your reason"></textarea>
            </div>
            <div class="flex justify-end space-x-3">
                <button type="button" id="close-return-item-btn" class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400">Cancel</button>
              
                <button type="button" id="confirmReturnItemBtn" class="px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700" 
                        data-item-id="">
                    <i class="fas fa-undo mr-2"></i>Confirm Return
                </button>
            </div>
        </div>
    </div>
</div>

    <!-- Cancel Item Modal -->
    <div id="cancelItemModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4 shadow-xl">
            <div class="flex items-center mb-4">
                <i class="fas fa-exclamation-triangle text-red-500 mr-3"></i>
                <h2 class="text-lg font-semibold">Cancel Item</h2>
            </div>
            <p class="text-sm text-gray-700 mb-2">Are you sure you want to cancel this item?</p>
            <p id="itemName" class="text-sm font-medium text-gray-900 mb-4"></p>
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">Reason for cancellation *</label>
                <select id="cancelItemReason" class="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500">
                    <option value="">Select a reason</option>
                    <option value="Changed my mind">Changed my mind</option>
                    <option value="Found better price elsewhere">Found better price elsewhere</option>
                    <option value="Ordered by mistake">Ordered by mistake</option>
                    <option value="Product not needed anymore">Product not needed anymore</option>
                    <option value="Delivery taking too long">Delivery taking too long</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            <div id="otherItemReasonDiv" class="mb-4 hidden">
                <textarea id="otherItemReason" class="w-full p-2 border rounded-md focus:ring-blue-500 focus:border-blue-500" rows="3" placeholder="Please specify your reason"></textarea>
            </div>
            <div class="flex justify-end space-x-3">
                <button id="closeItemModalBtn" class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 transition-colors">
                    Cancel
                </button>
                <button id="confirmCancelItemBtn" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors" data-item-id="">
                    <i class="fas fa-times mr-2"></i>Confirm Cancellation
                </button>
            </div>
        </div>
    </div>

    <!-- return item modal -->
     
    <script>
        // Toast notification function
       function showToast(message, type = 'info') {
    let toastContainer = document.querySelector('.toast-container');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.className = 'toast-container';
        toastContainer.style.position = 'fixed';
        toastContainer.style.top = '20px';
        toastContainer.style.right = '20px';
        toastContainer.style.zIndex = '9999';
        toastContainer.style.display = 'flex';
        toastContainer.style.flexDirection = 'column';
        toastContainer.style.gap = '10px';
        document.body.appendChild(toastContainer);
    }

    const toastId = 'toast-' + Date.now();
    const toast = document.createElement('div');

    let bgColor, borderColor, icon;
    switch (type) {
        case 'success':
            bgColor = '#15803d'; // green
            borderColor = '#15803d';
            icon = '<i class="fas fa-check-circle" style="margin-right: 8px;"></i>';
            break;
        case 'error':
            bgColor = '#dc2626'; // red
            borderColor = '#dc2626';
            icon = '<i class="fas fa-exclamation-circle" style="margin-right: 8px;"></i>';
            break;
        case 'info':
        default:
            bgColor = '#2563eb'; // blue
            borderColor = '#2563eb';
            icon = '<i class="fas fa-info-circle" style="margin-right: 8px;"></i>';
    }

    toast.style.cssText = `
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: ${bgColor};
        border-left: 4px solid ${borderColor};
        color: white;
        padding: 8px 16px;
        border-radius: 5px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        max-width: 300px;
        width: 100%;
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.3s ease, transform 0.3s ease;
    `;

    toast.id = toastId;
    toast.setAttribute('role', 'alert');
    toast.setAttribute('aria-live', 'assertive');
    toast.setAttribute('aria-atomic', 'true');

    toast.innerHTML = `
        <div style="display: flex; align-items: center; flex: 1; font-size: 14px;">
            ${icon}<span>${message}</span>
        </div>
        <button type="button" style="margin-left: 12px; background: none; border: none; color: white; font-size: 16px; cursor: pointer;" data-toast-id="${toastId}">
            &times;
        </button>
    `;

    toastContainer.appendChild(toast);

    // Animate in
    setTimeout(() => {
        toast.style.opacity = '1';
        toast.style.transform = 'translateY(0)';
    }, 100);

    // Close button
    const closeButton = toast.querySelector(`[data-toast-id="${toastId}"]`);
    closeButton.addEventListener('click', () => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateY(20px)';
        setTimeout(() => toast.remove(), 300);
    });

    // Auto remove
    setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateY(20px)';
        setTimeout(() => toast.remove(), 300);
    }, 1500);
}

        // Loading state management
        function setButtonLoading(button, loading) {
            if (loading) {
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Processing...';
            } else {
                button.disabled = false;
                button.innerHTML = button.getAttribute('data-original-text') || button.innerHTML;
            }
        }

        // Cancel Order Modal Logic
        const cancelOrderBtn = document.getElementById('cancelOrderBtn');
        const cancelOrderModal = document.getElementById('cancelOrderModal');
        const closeModalBtn = document.getElementById('closeModalBtn');
        const confirmCancelBtn = document.getElementById('confirmCancelBtn');
        const cancelReasonSelect = document.getElementById('cancelReason');
        const otherReasonDiv = document.getElementById('otherReasonDiv');
        const otherReasonTextarea = document.getElementById('otherReason');

        // Store original button text
        if (confirmCancelBtn) {
            confirmCancelBtn.setAttribute('data-original-text', confirmCancelBtn.innerHTML);
        }

        cancelOrderBtn?.addEventListener('click', () => {
            cancelOrderModal.classList.remove('hidden');
        });

        closeModalBtn?.addEventListener('click', () => {
            cancelOrderModal.classList.add('hidden');
            resetOrderModal();
        });

        cancelReasonSelect?.addEventListener('change', () => {
            if (cancelReasonSelect.value === 'Other') {
                otherReasonDiv.classList.remove('hidden');
            } else {
                otherReasonDiv.classList.add('hidden');
            }
        });

        function resetOrderModal() {
            cancelReasonSelect.value = '';
            otherReasonDiv.classList.add('hidden');
            otherReasonTextarea.value = '';
        }

        confirmCancelBtn?.addEventListener('click', async () => {
            const orderId = confirmCancelBtn.getAttribute('data-order-id');
            let cancelReason = cancelReasonSelect.value.trim();

            if (!cancelReason) {
                showToast('Please select a reason for cancellation', 'error');
                return;
            }

            if (cancelReason === 'Other') {
                const otherReason = otherReasonTextarea.value.trim();
                if (!otherReason) {
                    showToast('Please specify the reason for cancellation', 'error');
                    return;
                }
                cancelReason = otherReason;
            }

            setButtonLoading(confirmCancelBtn, true);

            try {
                const response = await fetch(`/order/cancel/${orderId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ cancelReason })
                });

                const result = await response.json();
                
                if (response.ok && result.success) {
                    showToast('Order cancelled successfully. Refund will be processed within 5-7 business days.', 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showToast(result.message || 'Failed to cancel order. Please try again.', 'error');
                }
            } catch (err) {
                console.error('Error cancelling order:', err);
                showToast('Something went wrong. Please try again later.', 'error');
            } finally {
                setButtonLoading(confirmCancelBtn, false);
            }

            cancelOrderModal.classList.add('hidden');
            resetOrderModal();
        });


        // return item modal logic
         const returnItemButtons = document.querySelectorAll('.return-item-btn');
        const returnItemModal = document.getElementById('returnItemModal');
        const closeReturnItemModalBtn = document.getElementById('close-return-item-btn');
        const confirmReturnItemBtn = document.getElementById('confirmReturnItemBtn');
        const returnItemReasonSelect = document.getElementById('returnItemReason');
const otherReturnItemReasonDiv = document.getElementById('otherReturnItemReasonDiv');
        const otherReturnItemReasonTextarea = document.getElementById('otherReturnItemReason');
         const returnItemNameDisplay = document.getElementById('returnItemName');
        
        if (confirmReturnItemBtn) {
            confirmReturnItemBtn.setAttribute('data-original-text', confirmReturnItemBtn.innerHTML);
        }
 returnItemButtons.forEach(button => {
            button.addEventListener('click', () => {
                const itemId = button.getAttribute('data-item-id');
                const returnItemName = button.getAttribute('data-item-name');
                confirmReturnItemBtn.setAttribute('data-item-id', itemId);
                returnItemNameDisplay.textContent = returnItemName;
                returnItemModal.classList.remove('hidden');
            });
        });

            closeReturnItemModalBtn?.addEventListener('click', () => {
            returnItemModal.classList.add('hidden');
            resetReturnItemModal();
        });
returnItemReasonSelect?.addEventListener('change', () => {
            if (returnItemReasonSelect.value === 'Other') {
                otherReturnItemReasonDiv.classList.remove('hidden');
            } else {
                otherReturnItemReasonDiv.classList.add('hidden');
            }
        });

            function resetReturnItemModal() {
            returnItemReasonSelect.value = '';
            otherReturnItemReasonDiv.classList.add('hidden');
            otherReturnItemReasonTextarea.value = '';
        }
 confirmReturnItemBtn?.addEventListener('click', async () => {
            const itemId = confirmReturnItemBtn.getAttribute('data-item-id');
            let returnItemReason = returnItemReasonSelect.value.trim();

            if (!returnItemReason) {
                showToast('Please select a reason for return', 'error');
                return;
            }

            if (returnItemReason === 'Other') {
                const otherReason = otherReturnItemReasonTextarea.value.trim();
                if (!otherReason) {
                    showToast('Please specify the reason for return', 'error');
                    return;
                }
                returnItemReason = otherReason;
            }

            setButtonLoading(confirmReturnItemBtn, true);

            try {
                const response = await fetch(`/order/return-item/${itemId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ returnItemReason })
                });

                const result = await response.json();
                
                if (response.ok && result.success) {
                    showToast('return item successfully. Refund will be processed within 5-7 business days', 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showToast(result.message || 'Failed to cancel item. Please try again.', 'error');
                }
            } catch (err) {
                console.error('Error cancelling item:', err);
                showToast('Something went wrong. Please try again later.', 'error');
            } finally {
                setButtonLoading(confirmReturnItemBtn, false);
            }

            returnItemModal.classList.add('hidden');
            resetReturnItemModal();
        });



        // Cancel Item Modal Logic
        const cancelItemButtons = document.querySelectorAll('.cancel-item-btn');
        const cancelItemModal = document.getElementById('cancelItemModal');
        const closeItemModalBtn = document.getElementById('closeItemModalBtn');
        const confirmCancelItemBtn = document.getElementById('confirmCancelItemBtn');
        const cancelItemReasonSelect = document.getElementById('cancelItemReason');
        const otherItemReasonDiv = document.getElementById('otherItemReasonDiv');
        const otherItemReasonTextarea = document.getElementById('otherItemReason');
        const itemNameDisplay = document.getElementById('itemName');

        // Store original button text
        if (confirmCancelItemBtn) {
            confirmCancelItemBtn.setAttribute('data-original-text', confirmCancelItemBtn.innerHTML);
        }

        cancelItemButtons.forEach(button => {
            button.addEventListener('click', () => {
                const itemId = button.getAttribute('data-item-id');
                const itemName = button.getAttribute('data-item-name');
                confirmCancelItemBtn.setAttribute('data-item-id', itemId);
                itemNameDisplay.textContent = itemName;
                cancelItemModal.classList.remove('hidden');
            });
        });

        closeItemModalBtn?.addEventListener('click', () => {
            cancelItemModal.classList.add('hidden');
            resetItemModal();
        });

        cancelItemReasonSelect?.addEventListener('change', () => {
            if (cancelItemReasonSelect.value === 'Other') {
                otherItemReasonDiv.classList.remove('hidden');
            } else {
                otherItemReasonDiv.classList.add('hidden');
            }
        });

        function resetItemModal() {
            cancelItemReasonSelect.value = '';
            otherItemReasonDiv.classList.add('hidden');
            otherItemReasonTextarea.value = '';
        }

        confirmCancelItemBtn?.addEventListener('click', async () => {
            const itemId = confirmCancelItemBtn.getAttribute('data-item-id');
            let cancelReason = cancelItemReasonSelect.value.trim();

            if (!cancelReason) {
                showToast('Please select a reason for cancellation', 'error');
                return;
            }

            if (cancelReason === 'Other') {
                const otherReason = otherItemReasonTextarea.value.trim();
                if (!otherReason) {
                    showToast('Please specify the reason for cancellation', 'error');
                    return;
                }
                cancelReason = otherReason;
            }

            setButtonLoading(confirmCancelItemBtn, true);

            try {
                const response = await fetch(`/order/cancel-item/${itemId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ cancelReason })
                });

                const result = await response.json();
                
                if (response.ok && result.success) {
                    showToast('Item cancelled successfully. Refund will be processed within 5-7 business days.', 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    showToast(result.message || 'Failed to cancel item. Please try again.', 'error');
                }
            } catch (err) {
                console.error('Error cancelling item:', err);
                showToast('Something went wrong. Please try again later.', 'error');
            } finally {
                setButtonLoading(confirmCancelItemBtn, false);
            }

            cancelItemModal.classList.add('hidden');
            resetItemModal();
        });




const returnReasonSelect = document.getElementById('returnReason');
    const otherReturnDiv = document.getElementById('otherReturnReasonDiv');
    const confirmReturnBtn = document.getElementById('confirmReturnBtn');
    const otherReturnTextarea = document.getElementById('otherReturnReason');
    const closeReturnModalBtn = document.getElementById('closeReturnModalBtn');
    const returnOrderModal = document.getElementById('returnOrderModal');

    // Store original button text
    if (confirmReturnBtn) {
        confirmReturnBtn.setAttribute('data-original-text', confirmReturnBtn.innerHTML);
    }

    // Handle reason selection
    returnReasonSelect?.addEventListener('change', () => {
        if (returnReasonSelect.value === 'Other') {
            otherReturnDiv.classList.remove('hidden');
            otherReturnTextarea.setAttribute('required', 'required');
        } else {
            otherReturnDiv.classList.add('hidden');
            otherReturnTextarea.removeAttribute('required');
        }
    });

    // Open return modal function
    window.openReturnModal = function() {
        returnOrderModal.classList.remove('hidden');
    };

    // Close return modal
    closeReturnModalBtn?.addEventListener('click', () => {
        returnOrderModal.classList.add('hidden');
        resetReturnModal();
    });

    // Reset return modal
    function resetReturnModal() {
        returnReasonSelect.value = '';
        otherReturnDiv.classList.add('hidden');
        otherReturnTextarea.value = '';
        otherReturnTextarea.removeAttribute('required');
    }

    // Handle return confirmation
    confirmReturnBtn?.addEventListener('click', async function(e) {
        e.preventDefault();
        
        const orderId = confirmReturnBtn.getAttribute('data-order-id');
        let returnReason = returnReasonSelect.value.trim();

        // Validation
        if (!returnReason) {
            showToast('Please select a reason for return', 'error');
            return;
        }

        if (returnReason === 'Other') {
            const otherReason = otherReturnTextarea.value.trim();
            if (!otherReason) {
                showToast('Please specify the reason for return', 'error');
                return;
            }
            returnReason = otherReason;
        }

        // Set loading state
        setButtonLoading(confirmReturnBtn, true);

        try {
            const response = await fetch(`/order/${orderId}/return`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    returnReason: returnReason
                })
            });

            const result = await response.json();

            if (response.ok && result.success) {
                showToast('Return request submitted successfully. You will be contacted soon.', 'success');
                setTimeout(() => {
                    window.location.reload();
                }, 2000);
            } else {
                showToast(result.message || 'Failed to submit return request. Please try again.', 'error');
            }
        } catch (err) {
            console.error('Error submitting return:', err);
            showToast('Something went wrong. Please try again later.', 'error');
        } finally {
            setButtonLoading(confirmReturnBtn, false);
        }

        returnOrderModal.classList.add('hidden');
        resetReturnModal();
    });

    // Close modal when clicking outside
    returnOrderModal?.addEventListener('click', (e) => {
        if (e.target === returnOrderModal) {
            returnOrderModal.classList.add('hidden');
            resetReturnModal();
        }
    });

    // Close modal on Escape key
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !returnOrderModal.classList.contains('hidden')) {
            returnOrderModal.classList.add('hidden');
            resetReturnModal();
        }
    });






        // Close modals when clicking outside
        window.addEventListener('click', (e) => {
            if (e.target === cancelOrderModal) {
                cancelOrderModal.classList.add('hidden');
                resetOrderModal();
            }
            if (e.target === cancelItemModal) {
                cancelItemModal.classList.add('hidden');
                resetItemModal();
            }
        });

        // Keyboard navigation for modals
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                if (!cancelOrderModal.classList.contains('hidden')) {
                    cancelOrderModal.classList.add('hidden');
                    resetOrderModal();
                }
                if (!cancelItemModal.classList.contains('hidden')) {
                    cancelItemModal.classList.add('hidden');
                    resetItemModal();
                }
            }
        });

        // Auto-hide toast notifications on click
        document.addEventListener('click', (e) => {
            if (e.target.closest('.toast')) {
                const toast = e.target.closest('.toast');
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }
        });

        // Print invoice functionality (optional enhancement)
        function printInvoice() {
            window.print();
        }

        // Copy order ID to clipboard (optional enhancement)
        function copyOrderId() {
            const orderId = '<%= order.orderId %>';
            navigator.clipboard.writeText(orderId).then(() => {
                showToast('Order ID copied to clipboard!', 'success');
            }).catch(() => {
                showToast('Failed to copy order ID', 'error');
            });
        }
    </script>

    <!-- Footer Include (if you have one) -->
    <%-include("../../views/partials/user/footer")%>
</body>
</html>